{"version":3,"file":"calculations.worker-BkzK_Pkx.js","sources":["../src/workers/calculations.worker.ts"],"sourcesContent":["// Web Worker for heavy calculations\r\nconst ctx: Worker = self as any;\r\n\r\ninterface LocationData {\r\n  latitude: number;\r\n  longitude: number;\r\n  timestamp: string;\r\n}\r\n\r\ninterface ETACalculation {\r\n  estimated_arrival_minutes: number;\r\n  distance_remaining: number;\r\n  is_near_stop: boolean;\r\n}\r\n\r\ninterface WorkerMessage {\r\n  type: 'CALCULATE_SPEED' | 'CALCULATE_ETA' | 'CALCULATE_DISTANCE';\r\n  data: any;\r\n}\r\n\r\n// Haversine formula for distance calculation\r\nfunction calculateDistance(\r\n  lat1: number,\r\n  lon1: number,\r\n  lat2: number,\r\n  lon2: number\r\n): number {\r\n  const R = 6371; // Earth's radius in kilometers\r\n  const dLat = toRadians(lat2 - lat1);\r\n  const dLon = toRadians(lon2 - lon1);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(toRadians(lat1)) *\r\n      Math.cos(toRadians(lat2)) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c; // Distance in kilometers\r\n}\r\n\r\nfunction toRadians(degrees: number): number {\r\n  return degrees * (Math.PI / 180);\r\n}\r\n\r\n// Calculate speed between two points\r\nfunction calculateSpeed(\r\n  lat1: number,\r\n  lon1: number,\r\n  lat2: number,\r\n  lon2: number,\r\n  timeDiffMs: number\r\n): number {\r\n  const distance = calculateDistance(lat1, lon1, lat2, lon2);\r\n  const timeDiffHours = timeDiffMs / (1000 * 60 * 60); // Convert to hours\r\n  const speed = distance / timeDiffHours; // Speed in km/h\r\n  return Math.round(speed * 10) / 10; // Round to 1 decimal place\r\n}\r\n\r\n// Calculate ETA to destination\r\nfunction calculateETA(\r\n  currentLocation: LocationData,\r\n  destination: { latitude: number; longitude: number },\r\n  averageSpeed: number = 30 // Default average speed in km/h\r\n): ETACalculation {\r\n  const distance = calculateDistance(\r\n    currentLocation.latitude,\r\n    currentLocation.longitude,\r\n    destination.latitude,\r\n    destination.longitude\r\n  );\r\n\r\n  const estimatedTimeHours = distance / averageSpeed;\r\n  const estimatedTimeMinutes = Math.round(estimatedTimeHours * 60);\r\n  const isNearStop = distance < 0.5; // Within 500 meters\r\n\r\n  return {\r\n    estimated_arrival_minutes: estimatedTimeMinutes,\r\n    distance_remaining: Math.round(distance * 10) / 10,\r\n    is_near_stop: isNearStop,\r\n  };\r\n}\r\n\r\n// Handle worker messages\r\nctx.addEventListener('message', (event: MessageEvent<WorkerMessage>) => {\r\n  const { type, data } = event.data;\r\n\r\n  try {\r\n    switch (type) {\r\n      case 'CALCULATE_SPEED':\r\n        const { lat1, lon1, lat2, lon2, timeDiffMs } = data;\r\n        const speed = calculateSpeed(lat1, lon1, lat2, lon2, timeDiffMs);\r\n        ctx.postMessage({ type: 'SPEED_CALCULATED', data: speed });\r\n        break;\r\n\r\n      case 'CALCULATE_ETA':\r\n        const { currentLocation, destination, averageSpeed } = data;\r\n        const eta = calculateETA(currentLocation, destination, averageSpeed);\r\n        ctx.postMessage({ type: 'ETA_CALCULATED', data: eta });\r\n        break;\r\n\r\n      case 'CALCULATE_DISTANCE':\r\n        const { point1, point2 } = data;\r\n        const distance = calculateDistance(\r\n          point1.latitude,\r\n          point1.longitude,\r\n          point2.latitude,\r\n          point2.longitude\r\n        );\r\n        ctx.postMessage({ type: 'DISTANCE_CALCULATED', data: distance });\r\n        break;\r\n\r\n      default:\r\n        ctx.postMessage({ type: 'ERROR', data: 'Unknown message type' });\r\n    }\r\n  } catch (error) {\r\n    ctx.postMessage({ type: 'ERROR', data: (error as Error).message || 'Unknown error' });\r\n  }\r\n});\r\n\r\nexport {};\r\n"],"names":["ctx","calculateDistance","lat1","lon1","lat2","lon2","dLat","toRadians","dLon","a","degrees","calculateSpeed","timeDiffMs","distance","timeDiffHours","speed","calculateETA","currentLocation","destination","averageSpeed","estimatedTimeHours","estimatedTimeMinutes","isNearStop","event","type","data","eta","point1","point2","error"],"mappings":"yBACA,MAAMA,EAAc,KAoBpB,SAASC,EACPC,EACAC,EACAC,EACAC,EACQ,CAER,MAAMC,EAAOC,EAAUH,EAAOF,CAAI,EAC5BM,EAAOD,EAAUF,EAAOF,CAAI,EAE5BM,EACJ,KAAK,IAAIH,EAAO,CAAC,EAAI,KAAK,IAAIA,EAAO,CAAC,EACtC,KAAK,IAAIC,EAAUL,CAAI,CAAC,EACtB,KAAK,IAAIK,EAAUH,CAAI,CAAC,EACxB,KAAK,IAAII,EAAO,CAAC,EACjB,KAAK,IAAIA,EAAO,CAAC,EAGrB,MAAO,OADG,EAAI,KAAK,MAAM,KAAK,KAAKC,CAAC,EAAG,KAAK,KAAK,EAAIA,CAAC,CAAC,EAEzD,CAEA,SAASF,EAAUG,EAAyB,CAC1C,OAAOA,GAAW,KAAK,GAAK,IAC9B,CAGA,SAASC,EACPT,EACAC,EACAC,EACAC,EACAO,EACQ,CACR,MAAMC,EAAWZ,EAAkBC,EAAMC,EAAMC,EAAMC,CAAI,EACnDS,EAAgBF,GAAc,IAAO,GAAK,IAC1CG,EAAQF,EAAWC,EACzB,OAAO,KAAK,MAAMC,EAAQ,EAAE,EAAI,EAClC,CAGA,SAASC,EACPC,EACAC,EACAC,EAAuB,GACP,CAChB,MAAMN,EAAWZ,EACfgB,EAAgB,SAChBA,EAAgB,UAChBC,EAAY,SACZA,EAAY,SAAA,EAGRE,EAAqBP,EAAWM,EAChCE,EAAuB,KAAK,MAAMD,EAAqB,EAAE,EACzDE,EAAaT,EAAW,GAE9B,MAAO,CACL,0BAA2BQ,EAC3B,mBAAoB,KAAK,MAAMR,EAAW,EAAE,EAAI,GAChD,aAAcS,CAAA,CAElB,CAGAtB,EAAI,iBAAiB,UAAYuB,GAAuC,CACtE,KAAM,CAAE,KAAAC,EAAM,KAAAC,CAAA,EAASF,EAAM,KAE7B,GAAI,CACF,OAAQC,EAAA,CACN,IAAK,kBACH,KAAM,CAAE,KAAAtB,EAAM,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,WAAAO,GAAea,EACzCV,EAAQJ,EAAeT,EAAMC,EAAMC,EAAMC,EAAMO,CAAU,EAC/DZ,EAAI,YAAY,CAAE,KAAM,mBAAoB,KAAMe,EAAO,EACzD,MAEF,IAAK,gBACH,KAAM,CAAE,gBAAAE,EAAiB,YAAAC,EAAa,aAAAC,CAAA,EAAiBM,EACjDC,EAAMV,EAAaC,EAAiBC,EAAaC,CAAY,EACnEnB,EAAI,YAAY,CAAE,KAAM,iBAAkB,KAAM0B,EAAK,EACrD,MAEF,IAAK,qBACH,KAAM,CAAE,OAAAC,EAAQ,OAAAC,CAAA,EAAWH,EACrBZ,EAAWZ,EACf0B,EAAO,SACPA,EAAO,UACPC,EAAO,SACPA,EAAO,SAAA,EAET5B,EAAI,YAAY,CAAE,KAAM,sBAAuB,KAAMa,EAAU,EAC/D,MAEF,QACEb,EAAI,YAAY,CAAE,KAAM,QAAS,KAAM,uBAAwB,CAAA,CAErE,OAAS6B,EAAO,CACd7B,EAAI,YAAY,CAAE,KAAM,QAAS,KAAO6B,EAAgB,SAAW,gBAAiB,CACtF,CACF,CAAC"}