{"version":3,"file":"MapContainer-BeAxOB0k.js","sources":["../../../src/components/map/MapContainer.tsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\r\nimport maplibregl from 'maplibre-gl';\r\n\r\ninterface MapContainerProps {\r\n  onMapLoad: (map: maplibregl.Map) => void;\r\n  onMapError: (error: any) => void;\r\n  onViewportChange?: (viewport: {\r\n    bounds: [[number, number], [number, number]];\r\n    zoom: number;\r\n    center: [number, number];\r\n  }) => void;\r\n  center?: [number, number];\r\n  zoom?: number;\r\n  enableClustering?: boolean;\r\n  enableHeatmap?: boolean;\r\n}\r\n\r\nconst MapContainer: React.FC<MapContainerProps> = ({\r\n  onMapLoad,\r\n  onMapError,\r\n  onViewportChange,\r\n  center = [72.8777, 23.0225], // Default to Ahmedabad\r\n  zoom = 12,\r\n  enableClustering = true,\r\n  enableHeatmap = false,\r\n}) => {\r\n  const mapContainer = useRef<HTMLDivElement>(null);\r\n  const map = useRef<maplibregl.Map | null>(null);\r\n  const viewportChangeTimeout = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const initializeMap = useCallback(() => {\r\n    if (!mapContainer.current || map.current) return;\r\n\r\n    try {\r\n      map.current = new maplibregl.Map({\r\n        container: mapContainer.current,\r\n        style: {\r\n          version: 8,\r\n          sources: {\r\n            'osm': {\r\n              type: 'raster',\r\n              tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\r\n              tileSize: 256,\r\n              attribution: '© OpenStreetMap contributors',\r\n              // Enhanced caching for better performance\r\n              maxzoom: 18,\r\n              bounds: [-180, -85.051129, 180, 85.051129],\r\n              // Add tile caching headers\r\n              scheme: 'xyz',\r\n            }\r\n          },\r\n          layers: [\r\n            {\r\n              id: 'osm-tiles',\r\n              type: 'raster',\r\n              source: 'osm',\r\n              minzoom: 0,\r\n              maxzoom: 18,\r\n              // Add performance optimizations\r\n              paint: {\r\n                'raster-opacity': 1,\r\n                'raster-fade-duration': 300,\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        center,\r\n        zoom,\r\n        attributionControl: true,\r\n        // Enhanced performance optimizations\r\n        preserveDrawingBuffer: false,\r\n        antialias: false,\r\n        failIfMajorPerformanceCaveat: false,\r\n        maxZoom: 18,\r\n        minZoom: 0,\r\n        // Add spatial optimization settings\r\n        maxBounds: [[72.0, 22.0], [74.0, 24.0]], // Restrict to Ahmedabad area\r\n        pitchWithRotate: false, // Disable 3D for better performance\r\n        dragRotate: false, // Disable rotation for better UX\r\n      });\r\n\r\n      map.current.on('load', () => {\r\n        console.log('🗺️ Map loaded successfully');\r\n        onMapLoad(map.current!);\r\n      });\r\n\r\n      map.current.on('error', (error) => {\r\n        console.error('❌ Map error:', error);\r\n        onMapError(error);\r\n      });\r\n\r\n      // Enhanced viewport change handling with debouncing\r\n      const handleViewportChange = () => {\r\n        if (!map.current || !onViewportChange) return;\r\n\r\n        // Clear existing timeout\r\n        if (viewportChangeTimeout.current) {\r\n          clearTimeout(viewportChangeTimeout.current);\r\n        }\r\n\r\n        // Debounce viewport changes for better performance\r\n        viewportChangeTimeout.current = setTimeout(() => {\r\n          const bounds = map.current!.getBounds();\r\n          const zoom = map.current!.getZoom();\r\n          const center = map.current!.getCenter();\r\n\r\n          onViewportChange({\r\n            bounds: [\r\n              [bounds.getWest(), bounds.getSouth()],\r\n              [bounds.getEast(), bounds.getNorth()]\r\n            ],\r\n            zoom,\r\n            center: [center.lng, center.lat],\r\n          });\r\n        }, 100); // 100ms debounce\r\n      };\r\n\r\n      // Listen to viewport changes\r\n      map.current.on('moveend', handleViewportChange);\r\n      map.current.on('zoomend', handleViewportChange);\r\n      map.current.on('resize', handleViewportChange);\r\n\r\n      // Handle WebGL context loss with better error recovery\r\n      let isContextLost = false;\r\n      \r\n      map.current.on('webglcontextlost', () => {\r\n        console.warn('⚠️ WebGL context lost, attempting to restore...');\r\n        \r\n        // Prevent multiple restoration attempts\r\n        if (isContextLost) return;\r\n        isContextLost = true;\r\n\r\n        setTimeout(() => {\r\n          if (map.current) {\r\n            try {\r\n              // Force a complete map refresh\r\n              map.current.resize();\r\n              map.current.triggerRepaint();\r\n              isContextLost = false;\r\n              console.log('✅ WebGL context restored successfully');\r\n            } catch (error) {\r\n              console.error('❌ Failed to restore WebGL context:', error);\r\n              onMapError(new Error('Map rendering failed, please refresh the page'));\r\n            }\r\n          }\r\n        }, 2000); // Increased delay for better recovery\r\n      });\r\n\r\n      map.current.on('webglcontextrestored', () => {\r\n        console.log('✅ WebGL context restored');\r\n        if (map.current) {\r\n          isContextLost = false;\r\n          map.current.triggerRepaint();\r\n        }\r\n      });\r\n\r\n      // Add error recovery for tile loading issues\r\n      map.current.on('error', (error) => {\r\n        console.error('❌ Map error:', error);\r\n        // Don't call onMapError for tile loading errors\r\n        if (error.type !== 'TileLoadError') {\r\n          onMapError(error);\r\n        }\r\n      });\r\n\r\n      // Add performance monitoring\r\n      map.current.on('idle', () => {\r\n        console.log('🗺️ Map is idle - all tiles loaded');\r\n      });\r\n\r\n      // Add spatial optimization features\r\n      if (enableClustering) {\r\n        console.log('🗺️ Clustering enabled');\r\n      }\r\n\r\n      if (enableHeatmap) {\r\n        console.log('🗺️ Heatmap enabled');\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error initializing map:', error);\r\n      onMapError(error);\r\n    }\r\n  }, [center, zoom, onMapLoad, onMapError, onViewportChange, enableClustering, enableHeatmap]);\r\n\r\n  useEffect(() => {\r\n    // Prevent double initialization\r\n    if (map.current) {\r\n      console.log('🗺️ Map already initialized, skipping...');\r\n      return;\r\n    }\r\n\r\n    initializeMap();\r\n\r\n    return () => {\r\n      if (viewportChangeTimeout.current) {\r\n        clearTimeout(viewportChangeTimeout.current);\r\n      }\r\n      \r\n      if (map.current) {\r\n        console.log('🗺️ Cleaning up map...');\r\n        map.current.remove();\r\n        map.current = null;\r\n      }\r\n    };\r\n  }, []); // Remove initializeMap dependency to prevent re-initialization\r\n\r\n  // Expose map methods for external use\r\n  useEffect(() => {\r\n    if (map.current && onViewportChange) {\r\n      // Trigger initial viewport change\r\n      const bounds = map.current.getBounds();\r\n      const currentZoom = map.current.getZoom();\r\n      const currentCenter = map.current.getCenter();\r\n\r\n      onViewportChange({\r\n        bounds: [\r\n          [bounds.getWest(), bounds.getSouth()],\r\n          [bounds.getEast(), bounds.getNorth()]\r\n        ],\r\n        zoom: currentZoom,\r\n        center: [currentCenter.lng, currentCenter.lat],\r\n      });\r\n    }\r\n  }, [map.current, onViewportChange]);\r\n\r\n  return (\r\n    <div\r\n      ref={mapContainer}\r\n      className=\"map-container\"\r\n      style={{ height: '100vh', width: '100%' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MapContainer;\r\n"],"names":["MapContainer","onMapLoad","onMapError","onViewportChange","center","zoom","enableClustering","enableHeatmap","mapContainer","useRef","map","viewportChangeTimeout","initializeMap","useCallback","maplibregl","error","handleViewportChange","bounds","isContextLost","useEffect","currentZoom","currentCenter","jsxDEV","this"],"mappings":"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"}