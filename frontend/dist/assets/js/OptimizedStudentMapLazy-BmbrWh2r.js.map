{"version":3,"mappings":"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","names":["ErrorHandler","__publicField","error","context","severity","errorMessage","networkInfo","conn","errorReport","message","pattern","_context","suggestions","retryable","color","retryableText","suggestion","byService","bySeverity","errorHandler","logError","ConnectionPool","websocketUrl","environment","protocol","host","finalWebsocketUrl","config","connectionName","existingSocket","status","connectionTimeout","socket","io","reason","delay","name","event","data","callback","listeners","now","connectionPool","SupabaseRealtimeService","tables","filter","subscriptionId","subscription","channel","supabase","payload","table","enabled","activeSubscriptions","sub","supabaseRealtimeService","detectBrowser","userAgent","isFirefox","isChrome","isSafari","isEdge","version","match","getFirefoxEventSourceOptions","checkFirefoxTrackingProtection","hasTrackingProtection","getFirefoxRecommendations","browser","recommendations","logFirefoxDebugInfo","SSEService","sseUrl","eventSourceOptions","fallbackError","_a","eventType","sseEvent","sseService","RealtimeManager","initPromises","successfulInits","result","backendUrl","response","healthStatus","type","source","priority","listener","index","websocketHealth","supabaseHealth","sseHealth","overall","statuses","s","health","realtimeManager","BusService","lat1","lon1","lat2","lon2","timeDiffMs","dLat","dLon","a","distance","timeDiffHours","speed","degrees","location","busId","latitude","longitude","timestamp","previousLocation","timeDiff","_b","routeName","bus","apiData","apiService","buses","busesByRoute","fiveMinutesAgo","eta","radiusKm","busLat","busLng","R","c","busService","WorkerService","resolve","currentLocation","destination","averageSpeed","point1","point2","estimatedTimeHours","estimatedTimeMinutes","isNearStop","workerService","useMapStore","create","devtools","set","get","state","prev","spatialIndex","key","updatedBuses","b","updatedLocations","id","routes","routeId","loading","collapsed","open","viewport","newState","visibleBuses","minLng","minLat","maxLng","maxLat","visibleRoutes","route","coords","lng","lat","clusters","clusterRadius","processedBuses","clusterBuses","otherBus","centerLng","sum","centerLat","lngs","lats","bounds","query","filteredBuses","radiusDegrees","VirtualBusList","itemHeight","containerHeight","onBusSelect","selectedBusId","scrollTop","setScrollTop","useState","visibleItems","useMemo","startIndex","endIndex","totalHeight","handleScroll","useCallback","handleBusClick","jsxDEV","this","AnimatePresence","motion","GlassyCard","MapContainer","React","__vitePreload","BusMarker","OptimizedStudentMapLazy","className","map","useRef","isMapInitialized","addedRoutes","setSelectedBusId","isConnected","connectionError","connectionStatus","setConnectionState","lastBusLocations","setBuses","updateBusLocation","removeBus","setRoutes","busClusters","setViewport","calculateClusters","isClusteringEnabled","isHeatmapEnabled","toggleClustering","toggleHeatmap","isLoading","setLoading","getFilteredBuses","routesData","routesLoading","useRoutesInViewport","busesData","busesLoading","useBusesInViewport","liveLocationsData","useLiveLocationsInViewport","clustersData","useBusClusters","handleMapLoad","mapInstance","handleMapError","handleViewportChange","newViewport","useEffect","busLocation","calculatedSpeed","removeRoutesFromMap","addRoutesToMap","centerMapOnBuses","coordinates","coord","handleBusSelect","handleRealtimeBusLocationUpdate","_c","_d","_e","_f","_g","handleRealtimeDriverConnected","handleRealtimeDriverDisconnected","handleRealtimeBusArriving","handleRealtimeBusUpdate","busData","handleRealtimeRouteUpdate","routeData","Suspense","cluster"],"ignoreList":[],"sources":["../../../src/utils/errorHandler.ts","../../../src/services/realtime/ConnectionPool.ts","../../../src/services/realtime/SupabaseRealtimeService.ts","../../../src/utils/firefoxCompatibility.ts","../../../src/services/realtime/SSEService.ts","../../../src/services/realtime/RealtimeManager.ts","../../../src/services/busService.ts","../../../src/services/workerService.ts","../../../src/stores/useMapStore.ts","../../../src/components/ui/VirtualBusList.tsx","../../../src/components/OptimizedStudentMapLazy.tsx"],"sourcesContent":["// Comprehensive Error Handler for Real-time Services\r\nexport interface ErrorContext {\r\n  service: 'websocket' | 'supabase' | 'sse' | 'api';\r\n  operation: string;\r\n  timestamp: string;\r\n  userAgent: string;\r\n  url: string;\r\n  networkInfo?: {\r\n    effectiveType?: string;\r\n    downlink?: number;\r\n    rtt?: number;\r\n    saveData?: boolean;\r\n  };\r\n}\r\n\r\nexport interface ErrorReport {\r\n  message: string;\r\n  context: ErrorContext;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  retryable: boolean;\r\n  suggestions: string[];\r\n}\r\n\r\nclass ErrorHandler {\r\n  private errorLog: ErrorReport[] = [];\r\n  private maxLogSize = 100;\r\n\r\n  // Log an error with context\r\n  logError(\r\n    error: Error | string | Event | unknown,\r\n    context: Partial<ErrorContext>,\r\n    severity: 'low' | 'medium' | 'high' | 'critical' = 'medium'\r\n  ): ErrorReport {\r\n    // Handle different error types\r\n    let errorMessage: string;\r\n    \r\n    if (error instanceof Error) {\r\n      errorMessage = error.message;\r\n    } else if (typeof error === 'string') {\r\n      errorMessage = error;\r\n    } else if (error instanceof Event) {\r\n      errorMessage = `Event error: ${error.type}`;\r\n    } else {\r\n      errorMessage = 'Unknown error';\r\n    }\r\n    \r\n    // Add network information if available\r\n    let networkInfo = {};\r\n    if (typeof navigator !== 'undefined' && 'connection' in navigator) {\r\n      const conn = (navigator as any).connection;\r\n      if (conn) {\r\n        networkInfo = {\r\n          effectiveType: conn.effectiveType,\r\n          downlink: conn.downlink,\r\n          rtt: conn.rtt,\r\n          saveData: conn.saveData,\r\n        };\r\n      }\r\n    }\r\n    \r\n    const errorReport: ErrorReport = {\r\n      message: errorMessage,\r\n      context: {\r\n        service: context.service || 'api',\r\n        operation: context.operation || 'unknown',\r\n        timestamp: new Date().toISOString(),\r\n        userAgent: navigator.userAgent,\r\n        url: window.location.href,\r\n        networkInfo: networkInfo as any,\r\n        ...context,\r\n      },\r\n      severity,\r\n      retryable: this.isRetryableError(error),\r\n      suggestions: this.getSuggestions(error, context),\r\n    };\r\n\r\n    this.errorLog.push(errorReport);\r\n    \r\n    // Keep log size manageable\r\n    if (this.errorLog.length > this.maxLogSize) {\r\n      this.errorLog.shift();\r\n    }\r\n\r\n    // Log to console with appropriate level\r\n    this.logToConsole(errorReport);\r\n\r\n    return errorReport;\r\n  }\r\n\r\n  // Check if an error is retryable\r\n  private isRetryableError(error: Error | string | Event | unknown): boolean {\r\n    let message: string;\r\n    \r\n    if (error instanceof Error) {\r\n      message = error.message;\r\n    } else if (typeof error === 'string') {\r\n      message = error;\r\n    } else if (error instanceof Event) {\r\n      message = error.type;\r\n    } else {\r\n      message = 'Unknown error';\r\n    }\r\n    \r\n    // Network-related errors are usually retryable\r\n    const retryablePatterns = [\r\n      /network/i,\r\n      /timeout/i,\r\n      /connection/i,\r\n      /cors/i,\r\n      /fetch/i,\r\n      /websocket/i,\r\n      /sse/i,\r\n      /socket\\.io/i,\r\n      /error/i,\r\n      /failed/i,\r\n      /disconnect/i,\r\n    ];\r\n\r\n    return retryablePatterns.some(pattern => pattern.test(message));\r\n  }\r\n\r\n  // Get suggestions for fixing the error\r\n  private getSuggestions(error: Error | string | Event | unknown, _context: Partial<ErrorContext>): string[] {\r\n    let message: string;\r\n    \r\n    if (error instanceof Error) {\r\n      message = error.message;\r\n    } else if (typeof error === 'string') {\r\n      message = error;\r\n    } else if (error instanceof Event) {\r\n      message = error.type;\r\n    } else {\r\n      message = 'Unknown error';\r\n    }\r\n    const suggestions: string[] = [];\r\n\r\n    if (message.includes('CORS')) {\r\n      suggestions.push('Check CORS configuration on the server');\r\n      suggestions.push('Verify the API endpoint is accessible');\r\n    }\r\n\r\n    if (message.includes('timeout')) {\r\n      suggestions.push('Increase connection timeout settings');\r\n      suggestions.push('Check network connectivity');\r\n    }\r\n\r\n    if (message.includes('websocket')) {\r\n      suggestions.push('Verify WebSocket server is running');\r\n      suggestions.push('Check WebSocket URL configuration');\r\n    }\r\n\r\n    if (message.includes('sse')) {\r\n      suggestions.push('Verify SSE endpoint is implemented on server');\r\n      suggestions.push('Check SSE URL configuration');\r\n    }\r\n\r\n    if (message.includes('supabase')) {\r\n      suggestions.push('Verify Supabase configuration');\r\n      suggestions.push('Check Supabase service status');\r\n    }\r\n\r\n    if (suggestions.length === 0) {\r\n      suggestions.push('Check network connectivity');\r\n      suggestions.push('Verify server is running');\r\n      suggestions.push('Check browser console for more details');\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  // Log to console with appropriate styling\r\n  private logToConsole(errorReport: ErrorReport): void {\r\n    const { message, context, severity, retryable, suggestions } = errorReport;\r\n    \r\n    const severityColors = {\r\n      low: 'color: #6b7280',\r\n      medium: 'color: #f59e0b',\r\n      high: 'color: #ef4444',\r\n      critical: 'color: #dc2626; font-weight: bold',\r\n    };\r\n\r\n    const color = severityColors[severity];\r\n    const retryableText = retryable ? '🔄 Retryable' : '❌ Not Retryable';\r\n\r\n    console.group(`%c${severity.toUpperCase()} ERROR - ${context.service.toUpperCase()}`, color);\r\n    console.error(`Message: ${message}`);\r\n    console.error(`Service: ${context.service}`);\r\n    console.error(`Operation: ${context.operation}`);\r\n    console.error(`Status: ${retryableText}`);\r\n    console.error(`Timestamp: ${context.timestamp}`);\r\n    \r\n    if (suggestions.length > 0) {\r\n      console.warn('Suggestions:');\r\n      suggestions.forEach(suggestion => console.warn(`  • ${suggestion}`));\r\n    }\r\n    \r\n    console.groupEnd();\r\n  }\r\n\r\n  // Get error statistics\r\n  getErrorStats(): {\r\n    total: number;\r\n    byService: Record<string, number>;\r\n    bySeverity: Record<string, number>;\r\n    recentErrors: ErrorReport[];\r\n  } {\r\n    const byService: Record<string, number> = {};\r\n    const bySeverity: Record<string, number> = {};\r\n\r\n    this.errorLog.forEach(error => {\r\n      byService[error.context.service] = (byService[error.context.service] || 0) + 1;\r\n      bySeverity[error.severity] = (bySeverity[error.severity] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      total: this.errorLog.length,\r\n      byService,\r\n      bySeverity,\r\n      recentErrors: this.errorLog.slice(-10), // Last 10 errors\r\n    };\r\n  }\r\n\r\n  // Clear error log\r\n  clearLog(): void {\r\n    this.errorLog = [];\r\n  }\r\n\r\n  // Get all errors\r\n  getErrors(): ErrorReport[] {\r\n    return [...this.errorLog];\r\n  }\r\n\r\n  // Check if there are critical errors\r\n  hasCriticalErrors(): boolean {\r\n    return this.errorLog.some(error => error.severity === 'critical');\r\n  }\r\n\r\n  // Get retryable errors\r\n  getRetryableErrors(): ErrorReport[] {\r\n    return this.errorLog.filter(error => error.retryable);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nexport const errorHandler = new ErrorHandler();\r\n\r\n// Export utility functions\r\nexport const logError = (\r\n  error: Error | string | Event | unknown,\r\n  context: Partial<ErrorContext>,\r\n  severity?: 'low' | 'medium' | 'high' | 'critical'\r\n) => errorHandler.logError(error, context, severity);\r\n\r\nexport const getErrorStats = () => errorHandler.getErrorStats();\r\nexport const hasCriticalErrors = () => errorHandler.hasCriticalErrors();\r\nexport const getRetryableErrors = () => errorHandler.getRetryableErrors();\r\n\r\nexport default errorHandler;\r\n","import { io, Socket } from 'socket.io-client';\r\nimport { environment } from '../../config/environment';\r\nimport { logError } from '../../utils/errorHandler';\r\n\r\nexport interface ConnectionConfig {\r\n  name: string;\r\n  url: string;\r\n  options?: any;\r\n  priority: 'high' | 'medium' | 'low';\r\n  autoReconnect: boolean;\r\n  maxReconnectAttempts: number;\r\n}\r\n\r\nexport interface ConnectionStatus {\r\n  name: string;\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  lastHeartbeat: number;\r\n  reconnectAttempts: number;\r\n  error?: string;\r\n}\r\n\r\nclass ConnectionPool {\r\n  private connections: Map<string, Socket> = new Map();\r\n  private connectionStatus: Map<string, ConnectionStatus> = new Map();\r\n  private connectionConfigs: Map<string, ConnectionConfig> = new Map();\r\n  private eventListeners: Map<string, Map<string, ((...args: any[]) => void)[]>> = new Map();\r\n  private healthCheckInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.initializeDefaultConnections();\r\n    this.startHealthCheck();\r\n  }\r\n\r\n  private initializeDefaultConnections(): void {\r\n    // Don't initialize connections during construction\r\n    // They will be initialized when needed\r\n  }\r\n\r\n  // Initialize connections when needed\r\n  private ensureConnectionsInitialized(): void {\r\n    if (this.connectionConfigs.size > 0) {\r\n      return; // Already initialized\r\n    }\r\n\r\n    // Get WebSocket URL from environment or construct it from current window location\r\n    let websocketUrl = environment.api.websocketUrl;\r\n    \r\n    // If no WebSocket URL is provided, try to construct one from the current window location\r\n    if (!websocketUrl && typeof window !== 'undefined') {\r\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n      const host = window.location.hostname;\r\n      const port = '3000'; // Default backend port\r\n      websocketUrl = `${protocol}//${host}:${port}`;\r\n    }\r\n    \r\n    // Final fallback for development\r\n    const finalWebsocketUrl = websocketUrl || 'ws://localhost:3000';\r\n    \r\n    console.log('🔌 Initializing WebSocket connections with URL:', finalWebsocketUrl);\r\n    \r\n    // High priority connection for critical location updates\r\n    this.addConnection({\r\n      name: 'location-updates',\r\n      url: finalWebsocketUrl,\r\n      priority: 'high',\r\n      autoReconnect: true,\r\n      maxReconnectAttempts: 15,\r\n      options: {\r\n        transports: ['websocket', 'polling'],\r\n        timeout: 15000,\r\n        reconnection: true,\r\n        reconnectionAttempts: 15,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        query: {\r\n          clientType: 'student',\r\n          connectionType: 'location-updates',\r\n          version: '1.0.0',\r\n        },\r\n      },\r\n    });\r\n\r\n    // Medium priority connection for general updates\r\n    this.addConnection({\r\n      name: 'general-updates',\r\n      url: finalWebsocketUrl,\r\n      priority: 'medium',\r\n      autoReconnect: true,\r\n      maxReconnectAttempts: 10,\r\n      options: {\r\n        transports: ['websocket', 'polling'],\r\n        timeout: 20000,\r\n        reconnection: true,\r\n        reconnectionAttempts: 10,\r\n        reconnectionDelay: 2000,\r\n        reconnectionDelayMax: 10000,\r\n        query: {\r\n          clientType: 'student',\r\n          connectionType: 'general-updates',\r\n          version: '1.0.0',\r\n        },\r\n      },\r\n    });\r\n\r\n    // Low priority connection for analytics and non-critical data\r\n    this.addConnection({\r\n      name: 'analytics',\r\n      url: finalWebsocketUrl,\r\n      priority: 'low',\r\n      autoReconnect: false,\r\n      maxReconnectAttempts: 3,\r\n      options: {\r\n        transports: ['polling'],\r\n        timeout: 30000,\r\n        reconnection: false,\r\n        query: {\r\n          clientType: 'student',\r\n          connectionType: 'analytics',\r\n          version: '1.0.0',\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  addConnection(config: ConnectionConfig): void {\r\n    this.connectionConfigs.set(config.name, config);\r\n    this.connectionStatus.set(config.name, {\r\n      name: config.name,\r\n      isConnected: false,\r\n      isConnecting: false,\r\n      lastHeartbeat: 0,\r\n      reconnectAttempts: 0,\r\n    });\r\n    this.eventListeners.set(config.name, new Map());\r\n  }\r\n\r\n  async connect(connectionName: string): Promise<void> {\r\n    // Ensure connections are initialized\r\n    this.ensureConnectionsInitialized();\r\n    \r\n    const config = this.connectionConfigs.get(connectionName);\r\n    if (!config) {\r\n      throw new Error(`Connection configuration not found: ${connectionName}`);\r\n    }\r\n\r\n    const existingSocket = this.connections.get(connectionName);\r\n    if (existingSocket?.connected) {\r\n      console.log(`🔌 Connection ${connectionName} already connected`);\r\n      return;\r\n    }\r\n\r\n    const status = this.connectionStatus.get(connectionName)!;\r\n    if (status.isConnecting) {\r\n      console.log(`🔌 Connection ${connectionName} already connecting`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      status.isConnecting = true;\r\n      console.log(`🔌 Connecting to ${connectionName}...`);\r\n\r\n      // Add connection timeout with better error handling\r\n      const connectionTimeout = setTimeout(() => {\r\n        if (status.isConnecting) {\r\n          console.warn(`⚠️ Connection timeout for ${connectionName}`);\r\n          status.isConnecting = false;\r\n          status.error = 'Connection timeout';\r\n          \r\n          // Log timeout error\r\n          logError(new Error(`Connection timeout for ${connectionName}`), {\r\n            service: 'websocket',\r\n            operation: `connect-${connectionName}`,\r\n          }, 'medium');\r\n          \r\n          // Attempt reconnection if auto-reconnect is enabled\r\n          if (config.autoReconnect && status.reconnectAttempts < config.maxReconnectAttempts) {\r\n            this.scheduleReconnect(connectionName);\r\n          }\r\n        }\r\n      }, 15000); // Increased to 15 seconds for better reliability\r\n\r\n      const socket = io(config.url, {\r\n        ...config.options,\r\n        timeout: 15000, // Increased timeout for better reliability\r\n        forceNew: true,\r\n        // Add additional options for better stability\r\n        transports: ['websocket', 'polling'],\r\n        upgrade: true,\r\n        rememberUpgrade: true,\r\n        // Add better error handling\r\n        autoConnect: false,\r\n        reconnection: true,\r\n        reconnectionAttempts: 10,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        maxReconnectionAttempts: 10,\r\n      });\r\n      \r\n      socket.on('connect', () => {\r\n        console.log(`✅ Connected to ${connectionName}`);\r\n        clearTimeout(connectionTimeout);\r\n        status.isConnected = true;\r\n        status.isConnecting = false;\r\n        status.reconnectAttempts = 0;\r\n        status.lastHeartbeat = Date.now();\r\n        status.error = undefined;\r\n      });\r\n\r\n      socket.on('disconnect', (reason) => {\r\n        console.log(`❌ Disconnected from ${connectionName}: ${reason}`);\r\n        status.isConnected = false;\r\n        status.isConnecting = false;\r\n        \r\n        if (config.autoReconnect && status.reconnectAttempts < config.maxReconnectAttempts) {\r\n          this.scheduleReconnect(connectionName);\r\n        }\r\n      });\r\n\r\n      socket.on('connect_error', (error) => {\r\n        console.error(`❌ Connection error for ${connectionName}:`, error);\r\n        clearTimeout(connectionTimeout);\r\n        status.error = error.message;\r\n        status.isConnecting = false;\r\n        \r\n        // Log error with context\r\n        logError(error, {\r\n          service: 'websocket',\r\n          operation: `connect-${connectionName}`,\r\n        }, 'medium');\r\n        \r\n        if (config.autoReconnect && status.reconnectAttempts < config.maxReconnectAttempts) {\r\n          this.scheduleReconnect(connectionName);\r\n        }\r\n      });\r\n\r\n      socket.on('error', (error) => {\r\n        console.error(`❌ Socket error for ${connectionName}:`, error);\r\n        status.error = error.message;\r\n      });\r\n\r\n      // Handle heartbeat\r\n      socket.on('pong', () => {\r\n        status.lastHeartbeat = Date.now();\r\n      });\r\n\r\n      this.connections.set(connectionName, socket);\r\n      \r\n      // Connect the socket\r\n      socket.connect();\r\n      \r\n    } catch (error) {\r\n      console.error(`❌ Failed to create connection for ${connectionName}:`, error);\r\n      status.isConnecting = false;\r\n      status.error = error instanceof Error ? error.message : 'Unknown error';\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private scheduleReconnect(connectionName: string): void {\r\n    const config = this.connectionConfigs.get(connectionName);\r\n    const status = this.connectionStatus.get(connectionName);\r\n    \r\n    if (!config || !status) return;\r\n\r\n    status.reconnectAttempts++;\r\n    const delay = Math.min(1000 * Math.pow(2, status.reconnectAttempts - 1), 30000);\r\n    \r\n    console.log(`🔄 Scheduling reconnect for ${connectionName} in ${delay}ms (attempt ${status.reconnectAttempts}/${config.maxReconnectAttempts})`);\r\n    \r\n    setTimeout(() => {\r\n      if (status.reconnectAttempts < config.maxReconnectAttempts) {\r\n        this.connect(connectionName);\r\n      }\r\n    }, delay);\r\n  }\r\n\r\n  disconnect(connectionName: string): void {\r\n    const socket = this.connections.get(connectionName);\r\n    if (socket) {\r\n      socket.disconnect();\r\n      this.connections.delete(connectionName);\r\n    }\r\n    \r\n    const status = this.connectionStatus.get(connectionName);\r\n    if (status) {\r\n      status.isConnected = false;\r\n      status.isConnecting = false;\r\n    }\r\n  }\r\n\r\n  disconnectAll(): void {\r\n    for (const [name] of this.connections) {\r\n      this.disconnect(name);\r\n    }\r\n  }\r\n\r\n  emit(connectionName: string, event: string, data: any): void {\r\n    const socket = this.connections.get(connectionName);\r\n    if (socket?.connected) {\r\n      socket.emit(event, data);\r\n    } else {\r\n      console.warn(`⚠️ Cannot emit to ${connectionName}: not connected`);\r\n    }\r\n  }\r\n\r\n  on(connectionName: string, event: string, callback: (...args: any[]) => void): void {\r\n    const socket = this.connections.get(connectionName);\r\n    if (socket) {\r\n      socket.on(event, callback);\r\n      \r\n      // Store listener for cleanup\r\n      const listeners = this.eventListeners.get(connectionName);\r\n      if (listeners) {\r\n        if (!listeners.has(event)) {\r\n          listeners.set(event, []);\r\n        }\r\n        listeners.get(event)!.push(callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  off(connectionName: string, event: string, callback?: (...args: any[]) => void): void {\r\n    const socket = this.connections.get(connectionName);\r\n    if (socket) {\r\n      if (callback) {\r\n        socket.off(event, callback);\r\n      } else {\r\n        socket.off(event);\r\n      }\r\n    }\r\n  }\r\n\r\n  getConnectionStatus(connectionName: string): ConnectionStatus | undefined {\r\n    return this.connectionStatus.get(connectionName);\r\n  }\r\n\r\n  getAllConnectionStatus(): ConnectionStatus[] {\r\n    return Array.from(this.connectionStatus.values());\r\n  }\r\n\r\n  isConnected(connectionName: string): boolean {\r\n    const status = this.connectionStatus.get(connectionName);\r\n    return status?.isConnected || false;\r\n  }\r\n\r\n  private startHealthCheck(): void {\r\n    this.healthCheckInterval = setInterval(() => {\r\n      const now = Date.now();\r\n      \r\n      for (const [name, status] of this.connectionStatus) {\r\n        if (status.isConnected && status.lastHeartbeat > 0) {\r\n          const timeSinceHeartbeat = now - status.lastHeartbeat;\r\n          \r\n          // If no heartbeat for 60 seconds, consider connection dead\r\n          if (timeSinceHeartbeat > 60000) {\r\n            console.warn(`⚠️ Connection ${name} appears dead, reconnecting...`);\r\n            this.disconnect(name);\r\n            this.connect(name);\r\n          }\r\n        }\r\n      }\r\n    }, 30000); // Check every 30 seconds\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.healthCheckInterval) {\r\n      clearInterval(this.healthCheckInterval);\r\n    }\r\n    this.disconnectAll();\r\n    this.connections.clear();\r\n    this.connectionStatus.clear();\r\n    this.connectionConfigs.clear();\r\n    this.eventListeners.clear();\r\n  }\r\n}\r\n\r\nexport const connectionPool = new ConnectionPool();\r\nexport default connectionPool;\r\n","import { RealtimeChannel } from '@supabase/supabase-js';\r\nimport { supabase } from '../../config/supabase';\r\n\r\nexport interface RealtimeSubscription {\r\n  id: string;\r\n  table: string;\r\n  event: 'INSERT' | 'UPDATE' | 'DELETE' | '*';\r\n  filter?: string;\r\n  callback: (payload: any) => void;\r\n}\r\n\r\nexport interface RealtimeConfig {\r\n  enabled: boolean;\r\n  tables: string[];\r\n  events: ('INSERT' | 'UPDATE' | 'DELETE')[];\r\n  filter?: string;\r\n}\r\n\r\nclass SupabaseRealtimeService {\r\n  private subscriptions: Map<string, RealtimeSubscription> = new Map();\r\n  private channels: Map<string, RealtimeChannel> = new Map();\r\n  private isEnabled: boolean = true;\r\n  // Reconnection properties (for future use)\r\n  // private reconnectAttempts: number = 0;\r\n  // private maxReconnectAttempts: number = 5;\r\n  // private reconnectDelay: number = 1000;\r\n\r\n  constructor() {\r\n    this.initializeRealtime();\r\n  }\r\n\r\n  private async initializeRealtime(): Promise<void> {\r\n    try {\r\n      // Enable realtime for specific tables\r\n      await this.enableRealtimeForTables([\r\n        'live_locations',\r\n        'bus_locations_live',\r\n        'buses',\r\n        'routes',\r\n        'driver_bus_assignments'\r\n      ]);\r\n\r\n      console.log('✅ Supabase Realtime initialized');\r\n    } catch (error) {\r\n      console.error('❌ Failed to initialize Supabase Realtime:', error);\r\n    }\r\n  }\r\n\r\n  private async enableRealtimeForTables(tables: string[]): Promise<void> {\r\n    // Note: In production, this would be done via Supabase dashboard or API\r\n    // For now, we'll assume realtime is enabled for these tables\r\n    console.log('🔧 Enabling realtime for tables:', tables);\r\n  }\r\n\r\n  // Subscribe to bus location updates\r\n  subscribeToBusLocations(\r\n    callback: (payload: any) => void,\r\n    filter?: string\r\n  ): string {\r\n    const subscriptionId = `bus-locations-${Date.now()}`;\r\n    \r\n    const subscription: RealtimeSubscription = {\r\n      id: subscriptionId,\r\n      table: 'live_locations',\r\n      event: '*',\r\n      filter,\r\n      callback,\r\n    };\r\n\r\n    this.subscriptions.set(subscriptionId, subscription);\r\n    \r\n    const channel = supabase\r\n      .channel(subscriptionId)\r\n      .on(\r\n        'postgres_changes' as any,\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'live_locations',\r\n          filter,\r\n        },\r\n        (payload) => {\r\n          console.log('📍 Bus location update via Supabase Realtime:', payload);\r\n          callback(payload);\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log(`🔌 Supabase Realtime subscription status for ${subscriptionId}:`, status);\r\n        if (status === 'SUBSCRIBED') {\r\n          this.channels.set(subscriptionId, channel);\r\n        }\r\n      });\r\n\r\n    return subscriptionId;\r\n  }\r\n\r\n  // Subscribe to bus information updates\r\n  subscribeToBusUpdates(\r\n    callback: (payload: any) => void,\r\n    filter?: string\r\n  ): string {\r\n    const subscriptionId = `bus-updates-${Date.now()}`;\r\n    \r\n    const subscription: RealtimeSubscription = {\r\n      id: subscriptionId,\r\n      table: 'buses',\r\n      event: '*',\r\n      filter,\r\n      callback,\r\n    };\r\n\r\n    this.subscriptions.set(subscriptionId, subscription);\r\n    \r\n    const channel = supabase\r\n      .channel(subscriptionId)\r\n      .on(\r\n        'postgres_changes' as any,\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'buses',\r\n          filter,\r\n        },\r\n        (payload) => {\r\n          console.log('🚌 Bus update via Supabase Realtime:', payload);\r\n          callback(payload);\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log(`🔌 Supabase Realtime subscription status for ${subscriptionId}:`, status);\r\n        if (status === 'SUBSCRIBED') {\r\n          this.channels.set(subscriptionId, channel);\r\n        }\r\n      });\r\n\r\n    return subscriptionId;\r\n  }\r\n\r\n  // Subscribe to route updates\r\n  subscribeToRouteUpdates(\r\n    callback: (payload: any) => void,\r\n    filter?: string\r\n  ): string {\r\n    const subscriptionId = `route-updates-${Date.now()}`;\r\n    \r\n    const subscription: RealtimeSubscription = {\r\n      id: subscriptionId,\r\n      table: 'routes',\r\n      event: '*',\r\n      filter,\r\n      callback,\r\n    };\r\n\r\n    this.subscriptions.set(subscriptionId, subscription);\r\n    \r\n    const channel = supabase\r\n      .channel(subscriptionId)\r\n      .on(\r\n        'postgres_changes' as any,\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'routes',\r\n          filter,\r\n        },\r\n        (payload) => {\r\n          console.log('🛣️ Route update via Supabase Realtime:', payload);\r\n          callback(payload);\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log(`🔌 Supabase Realtime subscription status for ${subscriptionId}:`, status);\r\n        if (status === 'SUBSCRIBED') {\r\n          this.channels.set(subscriptionId, channel);\r\n        }\r\n      });\r\n\r\n    return subscriptionId;\r\n  }\r\n\r\n  // Subscribe to driver assignments\r\n  subscribeToDriverAssignments(\r\n    callback: (payload: any) => void,\r\n    filter?: string\r\n  ): string {\r\n    const subscriptionId = `driver-assignments-${Date.now()}`;\r\n    \r\n    const subscription: RealtimeSubscription = {\r\n      id: subscriptionId,\r\n      table: 'driver_bus_assignments',\r\n      event: '*',\r\n      filter,\r\n      callback,\r\n    };\r\n\r\n    this.subscriptions.set(subscriptionId, subscription);\r\n    \r\n    const channel = supabase\r\n      .channel(subscriptionId)\r\n      .on(\r\n        'postgres_changes' as any,\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'driver_bus_assignments',\r\n          filter,\r\n        },\r\n        (payload) => {\r\n          console.log('👨‍💼 Driver assignment update via Supabase Realtime:', payload);\r\n          callback(payload);\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log(`🔌 Supabase Realtime subscription status for ${subscriptionId}:`, status);\r\n        if (status === 'SUBSCRIBED') {\r\n          this.channels.set(subscriptionId, channel);\r\n        }\r\n      });\r\n\r\n    return subscriptionId;\r\n  }\r\n\r\n  // Generic subscription method\r\n  subscribe(\r\n    table: string,\r\n    event: 'INSERT' | 'UPDATE' | 'DELETE' | '*',\r\n    callback: (payload: any) => void,\r\n    filter?: string\r\n  ): string {\r\n    const subscriptionId = `${table}-${event}-${Date.now()}`;\r\n    \r\n    const subscription: RealtimeSubscription = {\r\n      id: subscriptionId,\r\n      table,\r\n      event,\r\n      filter,\r\n      callback,\r\n    };\r\n\r\n    this.subscriptions.set(subscriptionId, subscription);\r\n    \r\n    const channel = supabase\r\n      .channel(subscriptionId)\r\n      .on(\r\n        'postgres_changes' as any,\r\n        {\r\n          event,\r\n          schema: 'public',\r\n          table,\r\n          filter,\r\n        },\r\n        (payload) => {\r\n          console.log(`📊 ${table} ${event} via Supabase Realtime:`, payload);\r\n          callback(payload);\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log(`🔌 Supabase Realtime subscription status for ${subscriptionId}:`, status);\r\n        if (status === 'SUBSCRIBED') {\r\n          this.channels.set(subscriptionId, channel);\r\n        }\r\n      });\r\n\r\n    return subscriptionId;\r\n  }\r\n\r\n  // Unsubscribe from a specific subscription\r\n  unsubscribe(subscriptionId: string): boolean {\r\n    const subscription = this.subscriptions.get(subscriptionId);\r\n    const channel = this.channels.get(subscriptionId);\r\n    \r\n    if (subscription && channel) {\r\n      supabase.removeChannel(channel);\r\n      this.subscriptions.delete(subscriptionId);\r\n      this.channels.delete(subscriptionId);\r\n      console.log(`🔌 Unsubscribed from ${subscriptionId}`);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  // Unsubscribe from all subscriptions\r\n  unsubscribeAll(): void {\r\n    for (const [subscriptionId] of this.subscriptions) {\r\n      this.unsubscribe(subscriptionId);\r\n    }\r\n  }\r\n\r\n  // Get subscription status\r\n  getSubscriptionStatus(subscriptionId: string): boolean {\r\n    return this.subscriptions.has(subscriptionId);\r\n  }\r\n\r\n  // Get all active subscriptions\r\n  getActiveSubscriptions(): RealtimeSubscription[] {\r\n    return Array.from(this.subscriptions.values());\r\n  }\r\n\r\n  // Enable/disable realtime\r\n  setEnabled(enabled: boolean): void {\r\n    this.isEnabled = enabled;\r\n    if (!enabled) {\r\n      this.unsubscribeAll();\r\n    }\r\n  }\r\n\r\n  // Check if realtime is enabled\r\n  isRealtimeEnabled(): boolean {\r\n    return this.isEnabled;\r\n  }\r\n\r\n  // Health check for realtime connections\r\n  async healthCheck(): Promise<{ healthy: boolean; details: any }> {\r\n    try {\r\n      const activeSubscriptions = this.getActiveSubscriptions();\r\n      const healthy = this.isEnabled && activeSubscriptions.length > 0;\r\n      \r\n      return {\r\n        healthy,\r\n        details: {\r\n          enabled: this.isEnabled,\r\n          activeSubscriptions: activeSubscriptions.length,\r\n          subscriptions: activeSubscriptions.map(sub => ({\r\n            id: sub.id,\r\n            table: sub.table,\r\n            event: sub.event,\r\n          })),\r\n        },\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        healthy: false,\r\n        details: {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  // Cleanup\r\n  destroy(): void {\r\n    this.unsubscribeAll();\r\n    this.subscriptions.clear();\r\n    this.channels.clear();\r\n  }\r\n}\r\n\r\nexport const supabaseRealtimeService = new SupabaseRealtimeService();\r\nexport default supabaseRealtimeService;\r\n","/**\n * Firefox Compatibility Utilities\n * Handles Firefox-specific issues with CORS, SSE, and WebSocket connections\n */\n\nexport interface BrowserInfo {\n  isFirefox: boolean;\n  isChrome: boolean;\n  isSafari: boolean;\n  isEdge: boolean;\n  version: string;\n  userAgent: string;\n}\n\n/**\n * Detect browser and version\n */\nexport const detectBrowser = (): BrowserInfo => {\n  const userAgent = navigator.userAgent;\n  \n  const isFirefox = /Firefox/.test(userAgent);\n  const isChrome = /Chrome/.test(userAgent) && !/Edge/.test(userAgent);\n  const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);\n  const isEdge = /Edge/.test(userAgent);\n  \n  let version = '';\n  if (isFirefox) {\n    const match = userAgent.match(/Firefox\\/(\\d+)/);\n    version = match ? match[1] : '';\n  } else if (isChrome) {\n    const match = userAgent.match(/Chrome\\/(\\d+)/);\n    version = match ? match[1] : '';\n  } else if (isSafari) {\n    const match = userAgent.match(/Version\\/(\\d+)/);\n    version = match ? match[1] : '';\n  } else if (isEdge) {\n    const match = userAgent.match(/Edge\\/(\\d+)/);\n    version = match ? match[1] : '';\n  }\n  \n  return {\n    isFirefox,\n    isChrome,\n    isSafari,\n    isEdge,\n    version,\n    userAgent\n  };\n};\n\n/**\n * Get Firefox-specific EventSource options\n */\nexport const getFirefoxEventSourceOptions = (): EventSourceInit => {\n  const browser = detectBrowser();\n  \n  if (browser.isFirefox) {\n    console.log('🦊 Firefox detected - using Firefox-specific EventSource configuration');\n    return {\n      withCredentials: false, // Firefox has issues with credentials in some cases\n    };\n  }\n  \n  // For all browsers, try without credentials first for better compatibility\n  return {\n    withCredentials: false, // More compatible across browsers\n  };\n};\n\n/**\n * Get Firefox-specific fetch options\n */\nexport const getFirefoxFetchOptions = (): RequestInit => {\n  const browser = detectBrowser();\n  \n  if (browser.isFirefox) {\n    console.log('🦊 Firefox detected - using Firefox-specific fetch configuration');\n    return {\n      credentials: 'include',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n      },\n    };\n  }\n  \n  return {\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n};\n\n/**\n * Check if Enhanced Tracking Protection is enabled (Firefox-specific)\n */\nexport const checkFirefoxTrackingProtection = (): boolean => {\n  const browser = detectBrowser();\n  \n  if (!browser.isFirefox) {\n    return false;\n  }\n  \n  // Try to detect if Enhanced Tracking Protection is blocking requests\n  // This is a heuristic - we can't directly detect it\n  const hasTrackingProtection = navigator.userAgent.includes('Firefox') && \n    (navigator.userAgent.includes('Firefox/78') || \n     navigator.userAgent.includes('Firefox/79') || \n     navigator.userAgent.includes('Firefox/8') ||\n     navigator.userAgent.includes('Firefox/9') ||\n     navigator.userAgent.includes('Firefox/10') ||\n     navigator.userAgent.includes('Firefox/11') ||\n     navigator.userAgent.includes('Firefox/12'));\n  \n  if (hasTrackingProtection) {\n    console.log('🦊 Firefox Enhanced Tracking Protection may be active');\n  }\n  \n  return hasTrackingProtection;\n};\n\n/**\n * Get Firefox-specific recommendations\n */\nexport const getFirefoxRecommendations = (): string[] => {\n  const browser = detectBrowser();\n  const recommendations: string[] = [];\n  \n  if (browser.isFirefox) {\n    recommendations.push(\n      '🦊 Firefox detected - if you experience CORS issues:',\n      '1. Disable Enhanced Tracking Protection for localhost',\n      '2. Go to about:config and set security.fileuri.strict_origin_policy to false',\n      '3. Try using Private Browsing mode',\n      '4. Disable browser extensions temporarily'\n    );\n  }\n  \n  return recommendations;\n};\n\n/**\n * Log Firefox-specific debugging information\n */\nexport const logFirefoxDebugInfo = (): void => {\n  const browser = detectBrowser();\n  \n  if (browser.isFirefox) {\n    console.log('🦊 Firefox Debug Information:', {\n      version: browser.version,\n      userAgent: browser.userAgent,\n      hasTrackingProtection: checkFirefoxTrackingProtection(),\n      recommendations: getFirefoxRecommendations(),\n    });\n  }\n};\n\nexport default {\n  detectBrowser,\n  getFirefoxEventSourceOptions,\n  getFirefoxFetchOptions,\n  checkFirefoxTrackingProtection,\n  getFirefoxRecommendations,\n  logFirefoxDebugInfo,\n};\n","import { environment } from '../../config/environment';\nimport { logError } from '../../utils/errorHandler';\nimport { getFirefoxEventSourceOptions, logFirefoxDebugInfo } from '../../utils/firefoxCompatibility';\n\nexport interface SSEConfig {\n  url: string;\n  retryInterval: number;\n  maxRetries: number;\n  timeout: number;\n}\n\nexport interface SSEEvent {\n  type: string;\n  data: any;\n  timestamp: number;\n}\n\nexport interface SSESubscription {\n  id: string;\n  eventType: string;\n  callback: (event: SSEEvent) => void;\n  isActive: boolean;\n}\n\nclass SSEService {\n  private eventSource: EventSource | null = null;\n  private subscriptions: Map<string, SSESubscription> = new Map();\n  private isConnected: boolean = false;\n  private reconnectAttempts: number = 0;\n  private maxReconnectAttempts: number = 5;\n  private reconnectDelay: number = 1000;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private config: SSEConfig;\n\n  constructor(config?: Partial<SSEConfig>) {\n    this.config = {\n      url: `${environment.api.url}/sse`,\n      retryInterval: 5000,\n      maxRetries: 5,\n      timeout: 30000,\n      ...config,\n    };\n  }\n\n  // Connect to SSE endpoint\n  async connect(): Promise<void> {\n    if (this.eventSource) {\n      console.log('🔌 SSE already connected');\n      return;\n    }\n\n    try {\n      console.log('🔌 Connecting to SSE endpoint...');\n      \n      // Create a URL object to ensure proper URL formatting\n      const sseUrl = new URL(this.config.url, window.location.origin);\n      \n      console.log('🔌 Connecting to SSE endpoint at:', sseUrl.toString());\n      \n      // Log Firefox debug info if needed\n      logFirefoxDebugInfo();\n      \n      // Get browser-specific EventSource options\n      const eventSourceOptions = getFirefoxEventSourceOptions();\n      \n      console.log('🔌 EventSource options:', eventSourceOptions);\n      \n      // Create EventSource with browser-specific configuration\n      try {\n        this.eventSource = new EventSource(sseUrl.toString(), eventSourceOptions);\n      } catch (error) {\n        console.error('❌ Failed to create EventSource:', error);\n        \n        // Firefox fallback: try without any options\n        try {\n          console.log('🔄 Trying Firefox fallback EventSource without options...');\n          this.eventSource = new EventSource(sseUrl.toString());\n        } catch (fallbackError) {\n          console.error('❌ Firefox fallback EventSource also failed:', fallbackError);\n          throw fallbackError;\n        }\n      }\n\n      this.setupEventListeners();\n      \n    } catch (error) {\n      console.error('❌ Failed to connect to SSE:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  private setupEventListeners(): void {\n    if (!this.eventSource) return;\n\n    // Connection opened\n    this.eventSource.onopen = () => {\n      console.log('✅ SSE connection opened');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n    };\n\n    // Connection error\n    this.eventSource.onerror = (error) => {\n      console.error('❌ SSE connection error:', error);\n      this.isConnected = false;\n      \n      // Log error with context\n      logError(error instanceof Error ? error : new Error('SSE connection error'), {\n        service: 'sse',\n        operation: 'connect',\n      }, 'medium');\n      \n      if (this.eventSource?.readyState === EventSource.CLOSED) {\n        this.scheduleReconnect();\n      }\n    };\n\n    // Note: EventSource doesn't have onclose, we handle disconnection through onerror\n    // Connection closed is handled in onerror when readyState is CLOSED\n\n    // Handle specific event types\n    this.setupSpecificEventListeners();\n  }\n\n  private setupSpecificEventListeners(): void {\n    if (!this.eventSource) return;\n\n    // Bus location updates\n    this.eventSource.addEventListener('bus-location-update', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleEvent('bus-location-update', data);\n      } catch (error) {\n        console.error('❌ Error parsing bus location update:', error);\n      }\n    });\n\n    // Bus status updates\n    this.eventSource.addEventListener('bus-status-update', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleEvent('bus-status-update', data);\n      } catch (error) {\n        console.error('❌ Error parsing bus status update:', error);\n      }\n    });\n\n    // Route updates\n    this.eventSource.addEventListener('route-update', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleEvent('route-update', data);\n      } catch (error) {\n        console.error('❌ Error parsing route update:', error);\n      }\n    });\n\n    // System notifications\n    this.eventSource.addEventListener('system-notification', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleEvent('system-notification', data);\n      } catch (error) {\n        console.error('❌ Error parsing system notification:', error);\n      }\n    });\n\n    // Generic message handler\n    this.eventSource.addEventListener('message', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleEvent('message', data);\n      } catch (error) {\n        console.error('❌ Error parsing generic message:', error);\n      }\n    });\n  }\n\n  private handleEvent(eventType: string, data: any): void {\n    const sseEvent: SSEEvent = {\n      type: eventType,\n      data,\n      timestamp: Date.now(),\n    };\n\n    console.log(`📡 SSE Event received: ${eventType}`, sseEvent);\n\n    // Notify all subscribers for this event type\n    for (const subscription of this.subscriptions.values()) {\n      if (subscription.eventType === eventType && subscription.isActive) {\n        try {\n          subscription.callback(sseEvent);\n        } catch (error) {\n          console.error(`❌ Error in SSE subscription callback for ${eventType}:`, error);\n        }\n      }\n    }\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('❌ Max SSE reconnection attempts reached');\n      \n      // Log final failure\n      logError(new Error('Max SSE reconnection attempts reached'), {\n        service: 'sse',\n        operation: 'reconnect',\n      }, 'high');\n      \n      return;\n    }\n\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n\n    this.reconnectAttempts++;\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n    \n    console.log(`🔄 Scheduling SSE reconnect in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n    \n    this.reconnectTimeout = setTimeout(() => {\n      // Only attempt reconnect if not already connected\n      if (!this.isConnected) {\n        this.disconnect();\n        this.connect();\n      }\n    }, delay);\n  }\n\n  // Subscribe to specific event types\n  subscribe(\n    eventType: string,\n    callback: (event: SSEEvent) => void\n  ): string {\n    const subscriptionId = `sse-${eventType}-${Date.now()}`;\n    \n    const subscription: SSESubscription = {\n      id: subscriptionId,\n      eventType,\n      callback,\n      isActive: true,\n    };\n\n    this.subscriptions.set(subscriptionId, subscription);\n    console.log(`🔌 SSE subscription created for ${eventType}: ${subscriptionId}`);\n    \n    return subscriptionId;\n  }\n\n  // Unsubscribe from specific subscription\n  unsubscribe(subscriptionId: string): boolean {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (subscription) {\n      subscription.isActive = false;\n      this.subscriptions.delete(subscriptionId);\n      console.log(`🔌 SSE subscription removed: ${subscriptionId}`);\n      return true;\n    }\n    return false;\n  }\n\n  // Unsubscribe from all subscriptions\n  unsubscribeAll(): void {\n    for (const [subscriptionId] of this.subscriptions) {\n      this.unsubscribe(subscriptionId);\n    }\n  }\n\n  // Disconnect from SSE\n  disconnect(): void {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = null;\n    }\n\n    this.isConnected = false;\n    console.log('🔌 SSE disconnected');\n  }\n\n  // Check connection status\n  isSSEConnected(): boolean {\n    return this.isConnected && this.eventSource?.readyState === EventSource.OPEN;\n  }\n\n  // Get connection status details\n  getConnectionStatus(): {\n    isConnected: boolean;\n    readyState: number;\n    reconnectAttempts: number;\n    activeSubscriptions: number;\n  } {\n    return {\n      isConnected: this.isConnected,\n      readyState: this.eventSource?.readyState || EventSource.CLOSED,\n      reconnectAttempts: this.reconnectAttempts,\n      activeSubscriptions: Array.from(this.subscriptions.values()).filter(sub => sub.isActive).length,\n    };\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ healthy: boolean; details: any }> {\n    const status = this.getConnectionStatus();\n    const healthy = status.isConnected && status.readyState === EventSource.OPEN;\n    \n    return {\n      healthy,\n      details: {\n        ...status,\n        config: this.config,\n      },\n    };\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.disconnect();\n    this.unsubscribeAll();\n    this.subscriptions.clear();\n  }\n}\n\nexport const sseService = new SSEService();\nexport default sseService;\n","import { connectionPool, ConnectionStatus } from './ConnectionPool';\nimport { supabaseRealtimeService, RealtimeSubscription } from './SupabaseRealtimeService';\nimport { sseService } from './SSEService';\nimport { environment } from '../../config/environment';\nimport { logError } from '../../utils/errorHandler';\n\nexport interface RealtimeConfig {\n  enableWebSocket: boolean;\n  enableSupabaseRealtime: boolean;\n  enableSSE: boolean;\n  priority: 'websocket' | 'supabase' | 'sse' | 'hybrid';\n  fallbackStrategy: 'websocket' | 'supabase' | 'sse';\n}\n\nexport interface RealtimeEvent {\n  type: string;\n  source: 'websocket' | 'supabase' | 'sse';\n  data: any;\n  timestamp: number;\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport interface RealtimeHealth {\n  websocket: { healthy: boolean; details: any };\n  supabase: { healthy: boolean; details: any };\n  sse: { healthy: boolean; details: any };\n  overall: boolean;\n}\n\nclass RealtimeManager {\n  private config: RealtimeConfig;\n  private eventListeners: Map<string, ((event: RealtimeEvent) => void)[]> = new Map();\n  private isInitialized: boolean = false;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n\n  constructor(config?: Partial<RealtimeConfig>) {\n    this.config = {\n      enableWebSocket: true,\n      enableSupabaseRealtime: true,\n      enableSSE: true,\n      priority: 'hybrid',\n      fallbackStrategy: 'websocket',\n      ...config,\n    };\n  }\n\n  // Initialize all real-time services\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      console.log('🔄 RealtimeManager already initialized');\n      return;\n    }\n\n    console.log('🚀 Initializing RealtimeManager...');\n\n    try {\n      // Initialize real-time services with fallback strategy\n      const initPromises = [];\n\n      // Initialize Supabase Realtime first (most reliable)\n      if (this.config.enableSupabaseRealtime) {\n        initPromises.push(\n          this.initializeSupabaseRealtime().catch(error => {\n            console.warn('⚠️ Supabase Realtime initialization failed:', error);\n            return null;\n          })\n        );\n      }\n\n      // Initialize WebSocket (may fail if backend is down)\n      if (this.config.enableWebSocket) {\n        initPromises.push(\n          this.initializeWebSocket().catch(error => {\n            console.warn('⚠️ WebSocket initialization failed:', error);\n            return null;\n          })\n        );\n      }\n\n      // Initialize SSE (optional)\n      if (this.config.enableSSE) {\n        initPromises.push(\n          this.initializeSSE().catch(error => {\n            console.warn('⚠️ SSE initialization failed:', error);\n            return null;\n          })\n        );\n      }\n\n      // Wait for all initialization attempts\n      const results = await Promise.allSettled(initPromises);\n      \n      // Count successful initializations\n      const successfulInits = results.filter(result => \n        result.status === 'fulfilled' && result.value !== null\n      ).length;\n\n      if (successfulInits === 0) {\n        console.warn('⚠️ No real-time services initialized successfully');\n      } else {\n        console.log(`✅ RealtimeManager initialized with ${successfulInits} service(s)`);\n      }\n\n      this.isInitialized = true;\n      this.startHealthCheck();\n      \n    } catch (error) {\n      console.error('❌ Failed to initialize RealtimeManager:', error);\n      this.isInitialized = false;\n      throw error;\n    }\n  }\n\n  private async initializeWebSocket(): Promise<void> {\n    console.log('🔌 Initializing WebSocket connection pool...');\n    \n    try {\n      // Check if backend is available first\n      const backendUrl = environment.api.url;\n      console.log('🔌 Checking backend availability at:', backendUrl);\n\n      const response = await fetch(backendUrl + '/health');\n      if (!response.ok) {\n        throw new Error(`Backend health check failed: ${response.statusText}`);\n      }\n      const healthStatus = await response.json();\n      console.log('✅ Backend health check successful:', healthStatus);\n\n      // Connect to high-priority connections first\n      await connectionPool.connect('location-updates');\n      await connectionPool.connect('general-updates');\n      \n      // Set up event listeners for WebSocket\n      this.setupWebSocketListeners();\n      \n      console.log('✅ WebSocket connections established successfully');\n    } catch (error) {\n      console.warn('⚠️ WebSocket initialization failed, falling back to Supabase Realtime:', error);\n      logError(error instanceof Error ? error : new Error('WebSocket initialization failed'), {\n        service: 'websocket',\n        operation: 'initialize',\n      }, 'high');\n      // Continue with other real-time services\n    }\n  }\n\n  private async initializeSupabaseRealtime(): Promise<void> {\n    console.log('🔌 Initializing Supabase Realtime...');\n    \n    // Set up Supabase Realtime subscriptions\n    this.setupSupabaseRealtimeListeners();\n  }\n\n  private async initializeSSE(): Promise<void> {\n    console.log('🔌 Initializing SSE...');\n    \n    try {\n      await sseService.connect();\n      this.setupSSEListeners();\n    } catch (error) {\n      console.warn('⚠️ SSE initialization failed:', error);\n      // Continue with other real-time services\n    }\n  }\n\n  private setupWebSocketListeners(): void {\n    // Bus location updates\n    connectionPool.on('location-updates', 'bus:locationUpdate', (data: any) => {\n      this.handleEvent('bus-location-update', 'websocket', data, 'high');\n    });\n\n    // Driver connections\n    connectionPool.on('general-updates', 'driver:connected', (data: any) => {\n      this.handleEvent('driver-connected', 'websocket', data, 'medium');\n    });\n\n    connectionPool.on('general-updates', 'driver:disconnected', (data: any) => {\n      this.handleEvent('driver-disconnected', 'websocket', data, 'medium');\n    });\n\n    // Bus arrivals\n    connectionPool.on('general-updates', 'bus:arriving', (data: any) => {\n      this.handleEvent('bus-arriving', 'websocket', data, 'high');\n    });\n  }\n\n  private setupSupabaseRealtimeListeners(): void {\n    // Subscribe to bus location updates\n    supabaseRealtimeService.subscribeToBusLocations((payload) => {\n      this.handleEvent('bus-location-update', 'supabase', payload, 'high');\n    });\n\n    // Subscribe to bus updates\n    supabaseRealtimeService.subscribeToBusUpdates((payload) => {\n      this.handleEvent('bus-update', 'supabase', payload, 'medium');\n    });\n\n    // Subscribe to route updates\n    supabaseRealtimeService.subscribeToRouteUpdates((payload) => {\n      this.handleEvent('route-update', 'supabase', payload, 'medium');\n    });\n\n    // Subscribe to driver assignments\n    supabaseRealtimeService.subscribeToDriverAssignments((payload) => {\n      this.handleEvent('driver-assignment-update', 'supabase', payload, 'medium');\n    });\n  }\n\n  private setupSSEListeners(): void {\n    // Subscribe to SSE events\n    sseService.subscribe('bus-location-update', (event) => {\n      this.handleEvent('bus-location-update', 'sse', event.data, 'high');\n    });\n\n    sseService.subscribe('bus-status-update', (event) => {\n      this.handleEvent('bus-status-update', 'sse', event.data, 'medium');\n    });\n\n    sseService.subscribe('route-update', (event) => {\n      this.handleEvent('route-update', 'sse', event.data, 'medium');\n    });\n\n    sseService.subscribe('system-notification', (event) => {\n      this.handleEvent('system-notification', 'sse', event.data, 'low');\n    });\n  }\n\n  private handleEvent(\n    type: string,\n    source: 'websocket' | 'supabase' | 'sse',\n    data: any,\n    priority: 'high' | 'medium' | 'low'\n  ): void {\n    const event: RealtimeEvent = {\n      type,\n      source,\n      data,\n      timestamp: Date.now(),\n      priority,\n    };\n\n    console.log(`📡 Realtime event: ${type} from ${source} (${priority} priority)`, event);\n\n    // Notify all listeners for this event type\n    const listeners = this.eventListeners.get(type);\n    if (listeners) {\n      listeners.forEach((listener) => {\n        try {\n          listener(event);\n        } catch (error) {\n          console.error(`❌ Error in realtime event listener for ${type}:`, error);\n        }\n      });\n    }\n  }\n\n  // Subscribe to real-time events\n  on(eventType: string, callback: (event: RealtimeEvent) => void): void {\n    if (!this.eventListeners.has(eventType)) {\n      this.eventListeners.set(eventType, []);\n    }\n    this.eventListeners.get(eventType)!.push(callback);\n  }\n\n  // Unsubscribe from real-time events\n  off(eventType: string, callback: (event: RealtimeEvent) => void): void {\n    const listeners = this.eventListeners.get(eventType);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  // Emit event through WebSocket\n  emit(event: string, data: any, priority: 'high' | 'medium' | 'low' = 'medium'): void {\n    const connectionName = priority === 'high' ? 'location-updates' : 'general-updates';\n    connectionPool.emit(connectionName, event, data);\n  }\n\n  // Get connection status for all services\n  getConnectionStatus(): {\n    websocket: ConnectionStatus[];\n    supabase: RealtimeSubscription[];\n    sse: { isConnected: boolean; readyState: number };\n  } {\n    return {\n      websocket: connectionPool.getAllConnectionStatus(),\n      supabase: supabaseRealtimeService.getActiveSubscriptions(),\n      sse: sseService.getConnectionStatus(),\n    };\n  }\n\n  // Health check for all services\n  async healthCheck(): Promise<RealtimeHealth> {\n    const [websocketHealth, supabaseHealth, sseHealth] = await Promise.all([\n      this.checkWebSocketHealth(),\n      supabaseRealtimeService.healthCheck(),\n      sseService.healthCheck(),\n    ]);\n\n    const overall = websocketHealth.healthy || supabaseHealth.healthy || sseHealth.healthy;\n\n    return {\n      websocket: websocketHealth,\n      supabase: supabaseHealth,\n      sse: sseHealth,\n      overall,\n    };\n  }\n\n  private async checkWebSocketHealth(): Promise<{ healthy: boolean; details: any }> {\n    const statuses = connectionPool.getAllConnectionStatus();\n    const healthy = statuses.some(status => status.isConnected);\n    \n    return {\n      healthy,\n      details: {\n        connections: statuses,\n        totalConnections: statuses.length,\n        connectedConnections: statuses.filter(s => s.isConnected).length,\n      },\n    };\n  }\n\n  private startHealthCheck(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        const health = await this.healthCheck();\n        \n        if (!health.overall) {\n          console.warn('⚠️ Realtime health check failed:', health);\n          await this.handleHealthFailure();\n        } else {\n          console.log('✅ Realtime health check passed');\n        }\n      } catch (error) {\n        console.error('❌ Error during realtime health check:', error);\n      }\n    }, 30000); // Check every 30 seconds\n  }\n\n  private async handleHealthFailure(): Promise<void> {\n    console.log('🔄 Attempting to recover from realtime health failure...');\n    \n    // Try to reconnect failed services\n    if (this.config.enableWebSocket) {\n      try {\n        await connectionPool.connect('location-updates');\n        await connectionPool.connect('general-updates');\n      } catch (error) {\n        console.error('❌ Failed to reconnect WebSocket:', error);\n      }\n    }\n\n    if (this.config.enableSSE) {\n      try {\n        await sseService.connect();\n      } catch (error) {\n        console.error('❌ Failed to reconnect SSE:', error);\n      }\n    }\n  }\n\n  // Configure real-time services\n  configure(config: Partial<RealtimeConfig>): void {\n    this.config = { ...this.config, ...config };\n    console.log('⚙️ RealtimeManager configuration updated:', this.config);\n  }\n\n  // Get current configuration\n  getConfig(): RealtimeConfig {\n    return { ...this.config };\n  }\n\n  // Cleanup and destroy all connections\n  destroy(): void {\n    console.log('🧹 Destroying RealtimeManager...');\n    \n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n\n    connectionPool.destroy();\n    supabaseRealtimeService.destroy();\n    sseService.destroy();\n    \n    this.eventListeners.clear();\n    this.isInitialized = false;\n    \n    console.log('✅ RealtimeManager destroyed');\n  }\n}\n\nexport const realtimeManager = new RealtimeManager();\nexport default realtimeManager;\n","import { BusLocation, BusInfo, Bus } from '../types';\nimport { IBusService } from './interfaces/IBusService';\nimport { apiService } from './api';\n\ninterface BusData {\n  [busId: string]: BusInfo;\n}\n\ninterface PreviousLocation {\n  latitude: number;\n  longitude: number;\n  timestamp: string;\n}\n\nclass BusService implements IBusService {\n  private buses: BusData = {};\n  private previousLocations: { [busId: string]: PreviousLocation } = {};\n\n  // Calculate speed between two points using Haversine formula\n  private calculateSpeed(\n    lat1: number,\n    lon1: number,\n    lat2: number,\n    lon2: number,\n    timeDiffMs: number\n  ): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) *\n        Math.cos(this.toRadians(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in kilometers\n\n    const timeDiffHours = timeDiffMs / (1000 * 60 * 60); // Convert to hours\n    const speed = distance / timeDiffHours; // Speed in km/h\n\n    return Math.round(speed * 10) / 10; // Round to 1 decimal place\n  }\n\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n\n  // Update bus location and calculate speed\n  updateBusLocation(location: BusLocation): void {\n    const { busId, latitude, longitude, timestamp } = location;\n\n    // Get previous location for speed calculation\n    const previousLocation = this.previousLocations[busId];\n\n    let speed: number | undefined;\n    if (previousLocation) {\n      const timeDiff =\n        new Date(timestamp).getTime() -\n        new Date(previousLocation.timestamp).getTime();\n      if (timeDiff > 0) {\n        speed = this.calculateSpeed(\n          previousLocation.latitude,\n          previousLocation.longitude,\n          latitude,\n          longitude,\n          timeDiff\n        );\n      }\n    }\n\n    // Update or create bus info\n    if (!this.buses[busId]) {\n      this.buses[busId] = {\n        busId,\n        busNumber: `Bus ${busId}`, // Default name, will be updated from API\n        routeName: 'Route TBD', // Default route, will be updated from API\n        driverName: 'Driver TBD', // Default name, will be updated from API\n        currentLocation: {\n          ...location,\n          speed: speed || location.speed,\n        },\n        eta: location.eta?.estimated_arrival_minutes,\n      };\n    } else {\n      this.buses[busId].currentLocation = {\n        ...location,\n        speed: speed || location.speed,\n      };\n      // Update ETA from location data\n      this.buses[busId].eta = location.eta?.estimated_arrival_minutes;\n    }\n\n    // Store current location as previous for next calculation\n    this.previousLocations[busId] = {\n      latitude,\n      longitude,\n      timestamp,\n    };\n  }\n\n  // Get bus information by ID\n  getBus(busId: string): BusInfo | null {\n    return this.buses[busId] || null;\n  }\n\n  // Get all buses\n  getAllBuses(): BusInfo[] {\n    return Object.values(this.buses);\n  }\n\n  // Get buses by route name\n  getBusesByRoute(routeName: string): BusInfo[] {\n    return Object.values(this.buses).filter(\n      (bus) => bus.routeName === routeName\n    );\n  }\n\n  // Sync bus data from API\n  async syncBusFromAPI(busId: string, apiData?: Bus): Promise<void> {\n    try {\n      // If no API data provided, fetch it from the backend\n      if (!apiData) {\n        const response = await apiService.getBusInfo(busId);\n        if (response.success && response.data) {\n          apiData = response.data;\n        } else {\n          console.error('❌ Failed to fetch bus data from API for bus:', busId);\n          return;\n        }\n      }\n\n      if (this.buses[busId]) {\n        // Update existing bus with API data\n        this.buses[busId] = {\n          ...this.buses[busId],\n          busNumber: apiData.number_plate || apiData.code || `Bus ${busId}`,\n          routeName: apiData.route_name || 'Route TBD',\n          driverName: apiData.driver_full_name || 'Driver TBD',\n        };\n      } else {\n        // Create new bus from API data\n        this.buses[busId] = {\n          busId,\n          busNumber: apiData.number_plate || apiData.code || `Bus ${busId}`,\n          routeName: apiData.route_name || 'Route TBD',\n          driverName: apiData.driver_full_name || 'Driver TBD',\n          currentLocation: {\n            busId,\n            driverId: apiData.assigned_driver_id || '',\n            latitude: 0,\n            longitude: 0,\n            timestamp: new Date().toISOString(),\n          },\n        };\n      }\n    } catch (error) {\n      console.error('❌ Error syncing bus data from API:', error);\n    }\n  }\n\n  // Sync all buses from API\n  async syncAllBusesFromAPI(): Promise<void> {\n    try {\n      const response = await apiService.getAllBuses();\n      if (response.success && response.data) {\n        response.data.forEach((bus: Bus) => {\n          this.syncBusFromAPI(bus.id, bus);\n        });\n      }\n    } catch (error) {\n      console.error('❌ Error syncing all buses from API:', error);\n    }\n  }\n\n  // Clear all buses\n  clearBuses(): void {\n    this.buses = {};\n    this.previousLocations = {};\n  }\n\n  // Get bus statistics\n  getBusStats(): {\n    totalBuses: number;\n    activeBuses: number;\n    busesByRoute: { [routeName: string]: number };\n  } {\n    const buses = Object.values(this.buses);\n    const busesByRoute: { [routeName: string]: number } = {};\n\n    buses.forEach((bus) => {\n      const routeName = bus.routeName;\n      busesByRoute[routeName] = (busesByRoute[routeName] || 0) + 1;\n    });\n\n    return {\n      totalBuses: buses.length,\n      activeBuses: buses.filter((bus) => bus.currentLocation).length,\n      busesByRoute,\n    };\n  }\n\n  // Get buses with recent activity (within last 5 minutes)\n  getActiveBuses(): BusInfo[] {\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n    return Object.values(this.buses).filter((bus) => {\n      const lastUpdate = new Date(bus.currentLocation.timestamp);\n      return lastUpdate > fiveMinutesAgo;\n    });\n  }\n\n  // Get bus location history (simplified - in real app, this would come from API)\n  getBusLocationHistory(busId: string): BusLocation[] {\n    // This is a simplified implementation\n    // In a real application, this would fetch from the backend API\n    const bus = this.buses[busId];\n    if (!bus) return [];\n\n    return [bus.currentLocation];\n  }\n\n  // Update bus ETA\n  updateBusETA(busId: string, eta: number): void {\n    if (this.buses[busId]) {\n      this.buses[busId].eta = eta;\n    }\n  }\n\n  // Get buses near a specific location\n  getBusesNearLocation(\n    latitude: number,\n    longitude: number,\n    radiusKm: number = 5\n  ): BusInfo[] {\n    return Object.values(this.buses).filter((bus) => {\n      const busLat = bus.currentLocation.latitude;\n      const busLng = bus.currentLocation.longitude;\n\n      // Calculate distance using Haversine formula\n      const R = 6371; // Earth's radius in kilometers\n      const dLat = this.toRadians(busLat - latitude);\n      const dLon = this.toRadians(busLng - longitude);\n\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(this.toRadians(latitude)) *\n          Math.cos(this.toRadians(busLat)) *\n          Math.sin(dLon / 2) *\n          Math.sin(dLon / 2);\n\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      const distance = R * c;\n\n      return distance <= radiusKm;\n    });\n  }\n}\n\n// Export singleton instance\nexport const busService = new BusService();\nexport default busService;\nexport type { BusInfo } from '../types';\n","import { BusLocation } from '../types';\r\n\r\ninterface WorkerResponse {\r\n  type: string;\r\n  data: any;\r\n}\r\n\r\nclass WorkerService {\r\n  private worker: Worker | null = null;\r\n  private callbacks: Map<string, (data: any) => void> = new Map();\r\n  private isSupported: boolean;\r\n\r\n  constructor() {\r\n    this.isSupported = typeof Worker !== 'undefined';\r\n    if (this.isSupported) {\r\n      this.initializeWorker();\r\n    }\r\n  }\r\n\r\n  private initializeWorker(): void {\r\n    try {\r\n      this.worker = new Worker(\r\n        new URL('../workers/calculations.worker.ts', import.meta.url),\r\n        { type: 'module' }\r\n      );\r\n\r\n      this.worker.onmessage = (event: MessageEvent<WorkerResponse>) => {\r\n        const { type, data } = event.data;\r\n        const callback = this.callbacks.get(type);\r\n        if (callback) {\r\n          callback(data);\r\n          this.callbacks.delete(type);\r\n        }\r\n      };\r\n\r\n      this.worker.onerror = (error) => {\r\n        console.error('❌ Worker error:', error);\r\n      };\r\n    } catch (error) {\r\n      console.warn('⚠️ Web Worker not supported, falling back to main thread');\r\n      this.isSupported = false;\r\n    }\r\n  }\r\n\r\n  // Calculate speed using Web Worker or fallback to main thread\r\n  async calculateSpeed(\r\n    lat1: number,\r\n    lon1: number,\r\n    lat2: number,\r\n    lon2: number,\r\n    timeDiffMs: number\r\n  ): Promise<number> {\r\n    if (!this.isSupported || !this.worker) {\r\n      return this.calculateSpeedFallback(lat1, lon1, lat2, lon2, timeDiffMs);\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      this.callbacks.set('SPEED_CALCULATED', resolve);\r\n      this.worker!.postMessage({\r\n        type: 'CALCULATE_SPEED',\r\n        data: { lat1, lon1, lat2, lon2, timeDiffMs },\r\n      });\r\n    });\r\n  }\r\n\r\n  // Calculate ETA using Web Worker or fallback to main thread\r\n  async calculateETA(\r\n    currentLocation: BusLocation,\r\n    destination: { latitude: number; longitude: number },\r\n    averageSpeed: number = 30\r\n  ): Promise<{\r\n    estimated_arrival_minutes: number;\r\n    distance_remaining: number;\r\n    is_near_stop: boolean;\r\n  }> {\r\n    if (!this.isSupported || !this.worker) {\r\n      return this.calculateETAFallback(currentLocation, destination, averageSpeed);\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      this.callbacks.set('ETA_CALCULATED', resolve);\r\n      this.worker!.postMessage({\r\n        type: 'CALCULATE_ETA',\r\n        data: { currentLocation, destination, averageSpeed },\r\n      });\r\n    });\r\n  }\r\n\r\n  // Calculate distance using Web Worker or fallback to main thread\r\n  async calculateDistance(\r\n    point1: { latitude: number; longitude: number },\r\n    point2: { latitude: number; longitude: number }\r\n  ): Promise<number> {\r\n    if (!this.isSupported || !this.worker) {\r\n      return this.calculateDistanceFallback(point1, point2);\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      this.callbacks.set('DISTANCE_CALCULATED', resolve);\r\n      this.worker!.postMessage({\r\n        type: 'CALCULATE_DISTANCE',\r\n        data: { point1, point2 },\r\n      });\r\n    });\r\n  }\r\n\r\n  // Fallback calculations for main thread\r\n  private calculateSpeedFallback(\r\n    lat1: number,\r\n    lon1: number,\r\n    lat2: number,\r\n    lon2: number,\r\n    timeDiffMs: number\r\n  ): number {\r\n    const distance = this.calculateDistanceFallback(\r\n      { latitude: lat1, longitude: lon1 },\r\n      { latitude: lat2, longitude: lon2 }\r\n    );\r\n    const timeDiffHours = timeDiffMs / (1000 * 60 * 60);\r\n    const speed = distance / timeDiffHours;\r\n    return Math.round(speed * 10) / 10;\r\n  }\r\n\r\n  private calculateETAFallback(\r\n    currentLocation: BusLocation,\r\n    destination: { latitude: number; longitude: number },\r\n    averageSpeed: number = 30\r\n  ): {\r\n    estimated_arrival_minutes: number;\r\n    distance_remaining: number;\r\n    is_near_stop: boolean;\r\n  } {\r\n    const distance = this.calculateDistanceFallback(\r\n      { latitude: currentLocation.latitude, longitude: currentLocation.longitude },\r\n      destination\r\n    );\r\n\r\n    const estimatedTimeHours = distance / averageSpeed;\r\n    const estimatedTimeMinutes = Math.round(estimatedTimeHours * 60);\r\n    const isNearStop = distance < 0.5;\r\n\r\n    return {\r\n      estimated_arrival_minutes: estimatedTimeMinutes,\r\n      distance_remaining: Math.round(distance * 10) / 10,\r\n      is_near_stop: isNearStop,\r\n    };\r\n  }\r\n\r\n  private calculateDistanceFallback(\r\n    point1: { latitude: number; longitude: number },\r\n    point2: { latitude: number; longitude: number }\r\n  ): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = this.toRadians(point2.latitude - point1.latitude);\r\n    const dLon = this.toRadians(point2.longitude - point1.longitude);\r\n\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(this.toRadians(point1.latitude)) *\r\n        Math.cos(this.toRadians(point2.latitude)) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n\r\n  private toRadians(degrees: number): number {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  // Cleanup worker\r\n  terminate(): void {\r\n    if (this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n    }\r\n    this.callbacks.clear();\r\n  }\r\n}\r\n\r\nexport const workerService = new WorkerService();\r\n","import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\nimport { BusLocation, BusInfo, Route } from '../types';\r\n\r\n// Spatial clustering interface\r\ninterface BusCluster {\r\n  id: string;\r\n  center: [number, number];\r\n  buses: BusInfo[];\r\n  count: number;\r\n  bounds: [[number, number], [number, number]];\r\n}\r\n\r\n// Spatial viewport interface\r\ninterface Viewport {\r\n  bounds: [[number, number], [number, number]];\r\n  zoom: number;\r\n  center: [number, number];\r\n}\r\n\r\n// Spatial query interface\r\ninterface SpatialQuery {\r\n  bounds?: [[number, number], [number, number]];\r\n  radius?: number;\r\n  center?: [number, number];\r\n  zoom?: number;\r\n}\r\n\r\ninterface MapState {\r\n  // Connection state\r\n  isConnected: boolean;\r\n  connectionError: string | null;\r\n  connectionStatus: 'connected' | 'connecting' | 'disconnected' | 'reconnecting';\r\n  \r\n  // Data state\r\n  buses: BusInfo[];\r\n  routes: Route[];\r\n  selectedRoute: string;\r\n  lastBusLocations: { [busId: string]: BusLocation };\r\n  \r\n  // Spatial optimization state\r\n  viewport: Viewport;\r\n  busClusters: BusCluster[];\r\n  spatialIndex: Map<string, BusInfo>;\r\n  visibleBuses: BusInfo[];\r\n  visibleRoutes: Route[];\r\n  \r\n  // Performance state\r\n  isLoading: boolean;\r\n  isNavbarCollapsed: boolean;\r\n  isRouteFilterOpen: boolean;\r\n  isActiveBusesOpen: boolean;\r\n  isClusteringEnabled: boolean;\r\n  isHeatmapEnabled: boolean;\r\n  \r\n  // Actions\r\n  setConnectionState: (state: {\r\n    isConnected?: boolean;\r\n    connectionError?: string | null;\r\n    connectionStatus?: 'connected' | 'connecting' | 'disconnected' | 'reconnecting';\r\n  }) => void;\r\n  \r\n  setBuses: (buses: BusInfo[]) => void;\r\n  updateBusLocation: (location: BusLocation) => void;\r\n  removeBus: (busId: string) => void;\r\n  \r\n  setRoutes: (routes: Route[]) => void;\r\n  setSelectedRoute: (routeId: string) => void;\r\n  \r\n  setLoading: (loading: boolean) => void;\r\n  setNavbarCollapsed: (collapsed: boolean) => void;\r\n  setRouteFilterOpen: (open: boolean) => void;\r\n  setActiveBusesOpen: (open: boolean) => void;\r\n  \r\n  // Spatial actions\r\n  setViewport: (viewport: Viewport) => void;\r\n  updateSpatialIndex: () => void;\r\n  calculateClusters: () => void;\r\n  querySpatialData: (query: SpatialQuery) => void;\r\n  toggleClustering: () => void;\r\n  toggleHeatmap: () => void;\r\n  \r\n  // Computed values\r\n  getActiveBuses: () => BusInfo[];\r\n  getBusesByRoute: (routeId: string) => BusInfo[];\r\n  getFilteredBuses: () => BusInfo[];\r\n  getBusesInViewport: () => BusInfo[];\r\n  getRoutesInViewport: () => Route[];\r\n  getBusClusters: () => BusCluster[];\r\n}\r\n\r\nexport const useMapStore = create<MapState>()(\r\n  devtools(\r\n    (set, get) => ({\r\n      // Initial state\r\n      isConnected: false,\r\n      connectionError: null,\r\n      connectionStatus: 'disconnected',\r\n      buses: [],\r\n      routes: [],\r\n      selectedRoute: 'all',\r\n      lastBusLocations: {},\r\n      viewport: {\r\n        bounds: [[72.5, 22.8], [73.2, 23.4]], // Default Ahmedabad bounds\r\n        zoom: 12,\r\n        center: [72.8777, 23.0225],\r\n      },\r\n      busClusters: [],\r\n      spatialIndex: new Map(),\r\n      visibleBuses: [],\r\n      visibleRoutes: [],\r\n      isLoading: true,\r\n      isNavbarCollapsed: false,\r\n      isRouteFilterOpen: true,\r\n      isActiveBusesOpen: true,\r\n      isClusteringEnabled: true,\r\n      isHeatmapEnabled: false,\r\n      \r\n      // Actions\r\n      setConnectionState: (state) =>\r\n        set((prev) => ({\r\n          ...prev,\r\n          ...state,\r\n        })),\r\n      \r\n      setBuses: (buses) =>\r\n        set(() => {\r\n          // Update spatial index when buses change\r\n          const spatialIndex = new Map();\r\n          buses.forEach(bus => {\r\n            if (bus.currentLocation) {\r\n              const key = `${Math.floor(bus.currentLocation.longitude * 100)},${Math.floor(bus.currentLocation.latitude * 100)}`;\r\n              spatialIndex.set(key, bus);\r\n            }\r\n          });\r\n          \r\n          return {\r\n            buses,\r\n            spatialIndex,\r\n          };\r\n        }),\r\n      \r\n      updateBusLocation: (location) =>\r\n        set((state) => {\r\n          const updatedBuses = state.buses.map((bus) =>\r\n            bus.busId === location.busId\r\n              ? {\r\n                  ...bus,\r\n                  currentLocation: location,\r\n                  eta: location.eta?.estimated_arrival_minutes,\r\n                }\r\n              : bus\r\n          );\r\n          \r\n          // Update spatial index\r\n          const spatialIndex = new Map(state.spatialIndex);\r\n          const key = `${Math.floor(location.longitude * 100)},${Math.floor(location.latitude * 100)}`;\r\n          const bus = updatedBuses.find(b => b.busId === location.busId);\r\n          if (bus) {\r\n            spatialIndex.set(key, bus);\r\n          }\r\n          \r\n          return {\r\n            lastBusLocations: {\r\n              ...state.lastBusLocations,\r\n              [location.busId]: location,\r\n            },\r\n            buses: updatedBuses,\r\n            spatialIndex,\r\n          };\r\n        }),\r\n      \r\n      removeBus: (busId) =>\r\n        set((state) => {\r\n          const updatedBuses = state.buses.filter((bus) => bus.busId !== busId);\r\n          const updatedLocations = Object.fromEntries(\r\n            Object.entries(state.lastBusLocations).filter(\r\n              ([id]) => id !== busId\r\n            )\r\n          );\r\n          \r\n          // Update spatial index\r\n          const spatialIndex = new Map();\r\n          updatedBuses.forEach(bus => {\r\n            if (bus.currentLocation) {\r\n              const key = `${Math.floor(bus.currentLocation.longitude * 100)},${Math.floor(bus.currentLocation.latitude * 100)}`;\r\n              spatialIndex.set(key, bus);\r\n            }\r\n          });\r\n          \r\n          return {\r\n            buses: updatedBuses,\r\n            lastBusLocations: updatedLocations,\r\n            spatialIndex,\r\n          };\r\n        }),\r\n      \r\n      setRoutes: (routes) =>\r\n        set({ routes }),\r\n      \r\n      setSelectedRoute: (routeId) =>\r\n        set({ selectedRoute: routeId }),\r\n      \r\n      setLoading: (loading) =>\r\n        set({ isLoading: loading }),\r\n      \r\n      setNavbarCollapsed: (collapsed) =>\r\n        set({ isNavbarCollapsed: collapsed }),\r\n      \r\n      setRouteFilterOpen: (open) =>\r\n        set({ isRouteFilterOpen: open }),\r\n      \r\n      setActiveBusesOpen: (open) =>\r\n        set({ isActiveBusesOpen: open }),\r\n      \r\n      // Spatial actions\r\n      setViewport: (viewport) =>\r\n        set((state) => {\r\n          // Trigger spatial queries when viewport changes\r\n          const newState = { viewport };\r\n          \r\n          // Calculate visible buses and routes\r\n          const visibleBuses = state.buses.filter(bus => {\r\n            if (!bus.currentLocation) return false;\r\n            const [minLng, minLat] = viewport.bounds[0];\r\n            const [maxLng, maxLat] = viewport.bounds[1];\r\n            return bus.currentLocation.longitude >= minLng &&\r\n                   bus.currentLocation.longitude <= maxLng &&\r\n                   bus.currentLocation.latitude >= minLat &&\r\n                   bus.currentLocation.latitude <= maxLat;\r\n          });\r\n          \r\n          const visibleRoutes = state.routes.filter(route => {\r\n            // Simple bounds check for routes\r\n            if (!route.stops || !route.stops.coordinates) return false;\r\n            const coords = route.stops.coordinates as [number, number][];\r\n            const [minLng, minLat] = viewport.bounds[0];\r\n            const [maxLng, maxLat] = viewport.bounds[1];\r\n            \r\n            return coords.some(([lng, lat]) =>\r\n              lng >= minLng && lng <= maxLng && lat >= minLat && lat <= maxLat\r\n            );\r\n          });\r\n          \r\n          return {\r\n            ...newState,\r\n            visibleBuses,\r\n            visibleRoutes,\r\n          };\r\n        }),\r\n      \r\n      updateSpatialIndex: () =>\r\n        set((state) => {\r\n          const spatialIndex = new Map();\r\n          state.buses.forEach(bus => {\r\n            if (bus.currentLocation) {\r\n              const key = `${Math.floor(bus.currentLocation.longitude * 100)},${Math.floor(bus.currentLocation.latitude * 100)}`;\r\n              spatialIndex.set(key, bus);\r\n            }\r\n          });\r\n          return { spatialIndex };\r\n        }),\r\n      \r\n      calculateClusters: () =>\r\n        set((state) => {\r\n          if (!state.isClusteringEnabled || state.visibleBuses.length === 0) {\r\n            return { busClusters: [] };\r\n          }\r\n          \r\n          const clusters: BusCluster[] = [];\r\n          const clusterRadius = Math.max(50, 1000 / Math.pow(2, state.viewport.zoom - 10));\r\n          const processedBuses = new Set<string>();\r\n          \r\n          state.visibleBuses.forEach(bus => {\r\n            if (processedBuses.has(bus.busId) || !bus.currentLocation) return;\r\n            \r\n            const clusterBuses = [bus];\r\n            processedBuses.add(bus.busId);\r\n            \r\n            // Find nearby buses\r\n            state.visibleBuses.forEach(otherBus => {\r\n              if (processedBuses.has(otherBus.busId) || !otherBus.currentLocation) return;\r\n              \r\n              const distance = Math.sqrt(\r\n                Math.pow(bus.currentLocation.longitude - otherBus.currentLocation.longitude, 2) +\r\n                Math.pow(bus.currentLocation.latitude - otherBus.currentLocation.latitude, 2)\r\n              ) * 111000; // Convert to meters\r\n              \r\n              if (distance <= clusterRadius) {\r\n                clusterBuses.push(otherBus);\r\n                processedBuses.add(otherBus.busId);\r\n              }\r\n            });\r\n            \r\n            if (clusterBuses.length > 1) {\r\n              // Calculate cluster center\r\n              const centerLng = clusterBuses.reduce((sum, b) => sum + b.currentLocation!.longitude, 0) / clusterBuses.length;\r\n              const centerLat = clusterBuses.reduce((sum, b) => sum + b.currentLocation!.latitude, 0) / clusterBuses.length;\r\n              \r\n              // Calculate bounds\r\n              const lngs = clusterBuses.map(b => b.currentLocation!.longitude);\r\n              const lats = clusterBuses.map(b => b.currentLocation!.latitude);\r\n              const bounds: [[number, number], [number, number]] = [\r\n                [Math.min(...lngs), Math.min(...lats)],\r\n                [Math.max(...lngs), Math.max(...lats)]\r\n              ];\r\n              \r\n              clusters.push({\r\n                id: `cluster-${clusters.length}`,\r\n                center: [centerLng, centerLat],\r\n                buses: clusterBuses,\r\n                count: clusterBuses.length,\r\n                bounds,\r\n              });\r\n            } else {\r\n              // Single bus cluster\r\n              clusters.push({\r\n                id: `cluster-${clusters.length}`,\r\n                center: [bus.currentLocation.longitude, bus.currentLocation.latitude],\r\n                buses: [bus],\r\n                count: 1,\r\n                bounds: [\r\n                  [bus.currentLocation.longitude, bus.currentLocation.latitude],\r\n                  [bus.currentLocation.longitude, bus.currentLocation.latitude]\r\n                ],\r\n              });\r\n            }\r\n          });\r\n          \r\n          return { busClusters: clusters };\r\n        }),\r\n      \r\n      querySpatialData: (query) =>\r\n        set((state) => {\r\n          let filteredBuses = state.buses;\r\n          \r\n          if (query.bounds) {\r\n            const [minLng, minLat] = query.bounds[0];\r\n            const [maxLng, maxLat] = query.bounds[1];\r\n            filteredBuses = filteredBuses.filter(bus => {\r\n              if (!bus.currentLocation) return false;\r\n              return bus.currentLocation.longitude >= minLng &&\r\n                     bus.currentLocation.longitude <= maxLng &&\r\n                     bus.currentLocation.latitude >= minLat &&\r\n                     bus.currentLocation.latitude <= maxLat;\r\n            });\r\n          }\r\n          \r\n          if (query.center && query.radius) {\r\n            const [centerLng, centerLat] = query.center;\r\n            const radiusDegrees = query.radius / 111000; // Convert meters to degrees\r\n            filteredBuses = filteredBuses.filter(bus => {\r\n              if (!bus.currentLocation) return false;\r\n              const distance = Math.sqrt(\r\n                Math.pow(bus.currentLocation.longitude - centerLng, 2) +\r\n                Math.pow(bus.currentLocation.latitude - centerLat, 2)\r\n              );\r\n              return distance <= radiusDegrees;\r\n            });\r\n          }\r\n          \r\n          return { visibleBuses: filteredBuses };\r\n        }),\r\n      \r\n      toggleClustering: () =>\r\n        set((state) => ({ isClusteringEnabled: !state.isClusteringEnabled })),\r\n      \r\n      toggleHeatmap: () =>\r\n        set((state) => ({ isHeatmapEnabled: !state.isHeatmapEnabled })),\r\n      \r\n      // Computed values\r\n      getActiveBuses: () => {\r\n        const state = get();\r\n        const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n        return state.buses.filter((bus) => {\r\n          if (!bus.currentLocation) return false;\r\n          const lastUpdate = new Date(bus.currentLocation.timestamp);\r\n          return lastUpdate > fiveMinutesAgo;\r\n        });\r\n      },\r\n      \r\n      getBusesByRoute: (routeId) => {\r\n        const state = get();\r\n        if (routeId === 'all') return state.buses;\r\n        return state.buses.filter((bus) => bus.routeName.includes(routeId));\r\n      },\r\n      \r\n      getFilteredBuses: () => {\r\n        const state = get();\r\n        return state.getBusesByRoute(state.selectedRoute);\r\n      },\r\n      \r\n      getBusesInViewport: () => {\r\n        const state = get();\r\n        return state.visibleBuses;\r\n      },\r\n      \r\n      getRoutesInViewport: () => {\r\n        const state = get();\r\n        return state.visibleRoutes;\r\n      },\r\n      \r\n      getBusClusters: () => {\r\n        const state = get();\r\n        return state.busClusters;\r\n      },\r\n    }),\r\n    {\r\n      name: 'map-store',\r\n    }\r\n  )\r\n);\r\n","import React, { useState, useCallback, useMemo } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { BusInfo } from '../../types';\r\nimport GlassyCard from './GlassyCard';\r\n\r\ninterface VirtualBusListProps {\r\n  buses: BusInfo[];\r\n  itemHeight?: number;\r\n  containerHeight?: number;\r\n  onBusSelect?: (bus: BusInfo) => void;\r\n  selectedBusId?: string;\r\n}\r\n\r\nconst VirtualBusList: React.FC<VirtualBusListProps> = ({\r\n  buses,\r\n  itemHeight = 80,\r\n  containerHeight = 400,\r\n  onBusSelect,\r\n  selectedBusId,\r\n}) => {\r\n  const [scrollTop, setScrollTop] = useState(0);\r\n\r\n  // Calculate visible items\r\n  const visibleItems = useMemo(() => {\r\n    const startIndex = Math.floor(scrollTop / itemHeight);\r\n    const endIndex = Math.min(\r\n      startIndex + Math.ceil(containerHeight / itemHeight) + 1,\r\n      buses.length\r\n    );\r\n\r\n    return buses.slice(startIndex, endIndex).map((bus, index) => ({\r\n      bus,\r\n      index: startIndex + index,\r\n    }));\r\n  }, [buses, scrollTop, itemHeight, containerHeight]);\r\n\r\n  // Calculate total height\r\n  const totalHeight = buses.length * itemHeight;\r\n\r\n  // Handle scroll\r\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\r\n    setScrollTop(event.currentTarget.scrollTop);\r\n  }, []);\r\n\r\n  // Handle bus selection\r\n  const handleBusClick = useCallback((bus: BusInfo) => {\r\n    onBusSelect?.(bus);\r\n  }, [onBusSelect]);\r\n\r\n  if (buses.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <p className=\"text-white/60\">No buses available</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"relative overflow-hidden\"\r\n      style={{ height: containerHeight }}\r\n    >\r\n      {/* Scrollable container */}\r\n      <div\r\n        className=\"overflow-auto\"\r\n        style={{ height: containerHeight }}\r\n        onScroll={handleScroll}\r\n      >\r\n        {/* Spacer for total height */}\r\n        <div style={{ height: totalHeight }} />\r\n      </div>\r\n\r\n      {/* Visible items */}\r\n      <div className=\"absolute top-0 left-0 right-0\">\r\n        <AnimatePresence>\r\n          {visibleItems.map(({ bus, index }) => (\r\n            <motion.div\r\n              key={bus.busId}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              transition={{ duration: 0.2 }}\r\n              style={{\r\n                position: 'absolute',\r\n                top: index * itemHeight,\r\n                left: 0,\r\n                right: 0,\r\n                height: itemHeight,\r\n              }}\r\n            >\r\n              <GlassyCard\r\n                className={`m-2 cursor-pointer transition-all duration-200 ${\r\n                  selectedBusId === bus.busId\r\n                    ? 'ring-2 ring-blue-400 bg-blue-500/20'\r\n                    : 'hover:bg-white/10'\r\n                }`}\r\n                onClick={() => handleBusClick(bus)}\r\n              >\r\n                <div className=\"flex items-center justify-between p-3\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\r\n                      <span className=\"text-lg\">🚌</span>\r\n                    </div>\r\n                    <div>\r\n                      <h3 className=\"text-white font-semibold\">\r\n                        {bus.busNumber}\r\n                      </h3>\r\n                      <p className=\"text-white/70 text-sm\">\r\n                        {bus.routeName}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <div\r\n                        className={`w-2 h-2 rounded-full ${\r\n                          bus.currentLocation\r\n                            ? 'bg-green-400 animate-pulse'\r\n                            : 'bg-red-400'\r\n                        }`}\r\n                      />\r\n                      <span className=\"text-white/60 text-xs\">\r\n                        {bus.currentLocation ? 'Online' : 'Offline'}\r\n                      </span>\r\n                    </div>\r\n                    {bus.currentLocation && (\r\n                      <p className=\"text-white/60 text-xs mt-1\">\r\n                        {bus.currentLocation.speed\r\n                          ? `${bus.currentLocation.speed} km/h`\r\n                          : 'Speed N/A'}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </GlassyCard>\r\n            </motion.div>\r\n          ))}\r\n        </AnimatePresence>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VirtualBusList;\r\n","import React, {\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  useMemo,\r\n  useState,\r\n  Suspense,\r\n} from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { realtimeManager, RealtimeEvent } from '../services/realtime/RealtimeManager';\r\nimport { busService } from '../services/busService';\r\nimport { workerService } from '../services/workerService';\r\nimport { useMapStore } from '../stores/useMapStore';\r\nimport { \r\n  useRoutesInViewport, \r\n  useBusesInViewport, \r\n  useLiveLocationsInViewport,\r\n  useBusClusters \r\n} from '../hooks/useApiQueries';\r\nimport { BusLocation } from '../types';\r\nimport GlassyCard from './ui/GlassyCard';\r\nimport VirtualBusList from './ui/VirtualBusList';\r\nimport './StudentMap.css';\r\n\r\n// Lazy load heavy components\r\nconst MapContainer = React.lazy(() => import('./map/MapContainer'));\r\nconst BusMarker = React.lazy(() => import('./map/BusMarker'));\r\n\r\ninterface OptimizedStudentMapLazyProps {\r\n  className?: string;\r\n}\r\n\r\nconst OptimizedStudentMapLazy: React.FC<OptimizedStudentMapLazyProps> = ({\r\n  className = '',\r\n}) => {\r\n  // Map references\r\n  const map = useRef<any>(null);\r\n  const isMapInitialized = useRef(false);\r\n  const addedRoutes = useRef<Set<string>>(new Set());\r\n  const [selectedBusId, setSelectedBusId] = useState<string | null>(null);\r\n\r\n  // Zustand store\r\n  const {\r\n    // Connection state\r\n    isConnected,\r\n    connectionError,\r\n    connectionStatus,\r\n    setConnectionState,\r\n    \r\n    // Data state\r\n    lastBusLocations,\r\n    setBuses,\r\n    updateBusLocation,\r\n    removeBus,\r\n    setRoutes,\r\n    \r\n    // Spatial state\r\n    viewport,\r\n    busClusters,\r\n    visibleBuses,\r\n    visibleRoutes,\r\n    setViewport,\r\n    calculateClusters,\r\n    isClusteringEnabled,\r\n    isHeatmapEnabled,\r\n    toggleClustering,\r\n    toggleHeatmap,\r\n    \r\n    // UI state\r\n    isLoading,\r\n    setLoading,\r\n    \r\n    // Computed values\r\n    getFilteredBuses,\r\n  } = useMapStore();\r\n\r\n  // Optimized React Query hooks for viewport-based loading\r\n  const { data: routesData, isLoading: routesLoading } = useRoutesInViewport(\r\n    viewport.bounds,\r\n    isMapInitialized.current\r\n  );\r\n  \r\n  const { data: busesData, isLoading: busesLoading } = useBusesInViewport(\r\n    viewport.bounds,\r\n    isMapInitialized.current\r\n  );\r\n  \r\n  const { data: liveLocationsData } = useLiveLocationsInViewport(\r\n    viewport.bounds,\r\n    isMapInitialized.current\r\n  );\r\n  \r\n  const { data: clustersData } = useBusClusters(\r\n    viewport.bounds,\r\n    viewport.zoom,\r\n    isClusteringEnabled && isMapInitialized.current\r\n  );\r\n\r\n  // Memoized values\r\n  const filteredBuses = useMemo(() => getFilteredBuses(), [getFilteredBuses]);\r\n\r\n  // Handle map load\r\n  const handleMapLoad = useCallback((mapInstance: any) => {\r\n    console.log('🗺️ Map loaded successfully');\r\n    // Prevent double assignment\r\n    if (map.current && map.current !== mapInstance) {\r\n      console.log('🗺️ Map already assigned, cleaning up previous instance');\r\n      map.current.remove();\r\n    }\r\n    map.current = mapInstance;\r\n    isMapInitialized.current = true;\r\n    setLoading(false);\r\n  }, [setLoading]);\r\n\r\n  // Handle map error\r\n  const handleMapError = useCallback((error: any) => {\r\n    console.error('❌ Map error:', error);\r\n    setConnectionState({ connectionError: 'Map loading failed' });\r\n  }, [setConnectionState]);\r\n\r\n  // Handle viewport changes\r\n  const handleViewportChange = useCallback((newViewport: {\r\n    bounds: [[number, number], [number, number]];\r\n    zoom: number;\r\n    center: [number, number];\r\n  }) => {\r\n    console.log('🗺️ Viewport changed:', newViewport);\r\n    setViewport(newViewport);\r\n    \r\n    // Trigger cluster calculation when viewport changes\r\n    if (isClusteringEnabled) {\r\n      setTimeout(() => calculateClusters(), 100);\r\n    }\r\n  }, [setViewport, isClusteringEnabled, calculateClusters]);\r\n\r\n  // Load routes from React Query (viewport-based)\r\n  useEffect(() => {\r\n    if (routesData?.success && routesData.data) {\r\n      console.log('✅ Routes loaded from viewport query:', routesData.data.length);\r\n      setRoutes(routesData.data as any);\r\n    }\r\n  }, [routesData, setRoutes]);\r\n\r\n  // Load buses from React Query (viewport-based)\r\n  useEffect(() => {\r\n    if (busesData?.success && busesData.data) {\r\n      console.log('✅ Buses loaded from viewport query:', busesData.data.length);\r\n      setBuses(busesData.data.map((bus: any) => ({\r\n        busId: bus.id,\r\n        busNumber: bus.number_plate || bus.code,\r\n        routeName: bus.route_name || 'Route TBD',\r\n        driverName: bus.driver_full_name || 'Driver TBD',\r\n        currentLocation: {\r\n          busId: bus.id,\r\n          driverId: bus.assigned_driver_id || '',\r\n          latitude: 0,\r\n          longitude: 0,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      })));\r\n    }\r\n  }, [busesData, setBuses]);\r\n\r\n  // Update bus locations from live data with Web Worker optimization\r\n  useEffect(() => {\r\n    if (liveLocationsData?.success && liveLocationsData.data) {\r\n      liveLocationsData.data.forEach(async (location: any) => {\r\n        // Convert to proper BusLocation type\r\n        const busLocation: BusLocation = {\r\n          busId: location.busId,\r\n          driverId: location.driverId || '',\r\n          latitude: location.latitude,\r\n          longitude: location.longitude,\r\n          timestamp: location.timestamp,\r\n          speed: location.speed,\r\n          heading: location.heading,\r\n          eta: location.eta,\r\n        };\r\n\r\n        // Use Web Worker for speed calculation if not provided\r\n        if (!location.speed && busService.getBus(location.busId)) {\r\n          const previousLocation = busService.getBus(location.busId)?.currentLocation;\r\n          if (previousLocation) {\r\n            const timeDiff = new Date(location.timestamp).getTime() - new Date(previousLocation.timestamp).getTime();\r\n            if (timeDiff > 0) {\r\n              const calculatedSpeed = await workerService.calculateSpeed(\r\n                previousLocation.latitude,\r\n                previousLocation.longitude,\r\n                location.latitude,\r\n                location.longitude,\r\n                timeDiff\r\n              );\r\n              busLocation.speed = calculatedSpeed;\r\n            }\r\n          }\r\n        }\r\n\r\n        updateBusLocation(busLocation);\r\n      });\r\n    }\r\n  }, [liveLocationsData, updateBusLocation]);\r\n\r\n  // Remove routes from map\r\n  const removeRoutesFromMap = useCallback(() => {\r\n    if (!map.current) return;\r\n\r\n    visibleRoutes.forEach((route) => {\r\n      const routeId = `route-${route.id}`;\r\n\r\n      try {\r\n        if (map.current!.getLayer(routeId)) {\r\n          map.current!.removeLayer(routeId);\r\n        }\r\n        if (map.current!.getSource(routeId)) {\r\n          map.current!.removeSource(routeId);\r\n        }\r\n        addedRoutes.current.delete(routeId);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Error removing route ${route.name}:`, error);\r\n      }\r\n    });\r\n  }, [visibleRoutes]);\r\n\r\n  // Add routes to map (optimized for viewport)\r\n  const addRoutesToMap = useCallback(() => {\r\n    if (!map.current || visibleRoutes.length === 0) return;\r\n\r\n    console.log('🗺️ Adding routes to map:', visibleRoutes.length, 'routes');\r\n\r\n    visibleRoutes.forEach((route, index) => {\r\n      const routeId = `route-${route.id}`;\r\n\r\n      if (addedRoutes.current.has(routeId) || map.current!.getSource(routeId)) {\r\n        console.log(`🗺️ Route ${routeId} already exists, skipping...`);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        map.current!.addSource(routeId, {\r\n          type: 'geojson',\r\n          data: {\r\n            type: 'Feature',\r\n            properties: {\r\n              name: route.name,\r\n              description: route.description,\r\n              distance: route.distance_km,\r\n              duration: route.estimated_duration_minutes,\r\n            },\r\n            geometry: route.stops,\r\n          },\r\n        });\r\n\r\n        map.current!.addLayer({\r\n          id: routeId,\r\n          type: 'line',\r\n          source: routeId,\r\n          layout: {\r\n            'line-join': 'round',\r\n            'line-cap': 'round',\r\n          },\r\n          paint: {\r\n            'line-color': `hsl(${(index * 137.5) % 360}, 70%, 50%)`,\r\n            'line-width': 4,\r\n            'line-opacity': 0.8,\r\n          },\r\n        });\r\n\r\n        console.log(`🗺️ Added route ${route.name} to map`);\r\n        addedRoutes.current.add(routeId);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Error adding route ${route.name}:`, error);\r\n      }\r\n    });\r\n  }, [visibleRoutes]);\r\n\r\n  // Center map on all buses\r\n  const centerMapOnBuses = useCallback(() => {\r\n    if (!map.current || Object.keys(lastBusLocations).length === 0) return;\r\n\r\n    const coordinates = Object.values(lastBusLocations).map(\r\n      (location) => [location.longitude, location.latitude] as [number, number]\r\n    );\r\n\r\n    if (coordinates.length === 1) {\r\n      map.current.flyTo({\r\n        center: coordinates[0],\r\n        zoom: 16,\r\n        duration: 2000,\r\n      });\r\n    } else if (coordinates.length > 1) {\r\n      const bounds = new (window as any).maplibregl.LngLatBounds();\r\n      coordinates.forEach((coord) => bounds.extend(coord));\r\n\r\n      map.current.fitBounds(bounds, {\r\n        padding: 50,\r\n        duration: 2000,\r\n      });\r\n    }\r\n  }, [lastBusLocations]);\r\n\r\n  // Handle bus selection\r\n  const handleBusSelect = useCallback((bus: any) => {\r\n    setSelectedBusId(bus.busId);\r\n    \r\n    // Center map on selected bus\r\n    if (map.current && bus.currentLocation) {\r\n      map.current.flyTo({\r\n        center: [bus.currentLocation.longitude, bus.currentLocation.latitude],\r\n        zoom: 16,\r\n        duration: 1000,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // Handle real-time bus location updates\r\n  const handleRealtimeBusLocationUpdate = useCallback(\r\n    (event: RealtimeEvent) => {\r\n      console.log('📍 Real-time bus location update:', event);\r\n      const location = event.data;\r\n      \r\n      // Convert to our BusLocation type\r\n      const busLocation: BusLocation = {\r\n        busId: location.busId || location.new?.bus_id,\r\n        driverId: location.driverId || location.new?.driver_id || '',\r\n        latitude: location.latitude || location.new?.latitude,\r\n        longitude: location.longitude || location.new?.longitude,\r\n        timestamp: location.timestamp || location.new?.recorded_at,\r\n        speed: location.speed || location.new?.speed_kmh,\r\n        heading: location.heading || location.new?.heading_degrees,\r\n        eta: location.eta,\r\n      };\r\n      \r\n      updateBusLocation(busLocation);\r\n    },\r\n    [updateBusLocation]\r\n  );\r\n\r\n  // Handle real-time driver connections\r\n  const handleRealtimeDriverConnected = useCallback(\r\n    (event: RealtimeEvent) => {\r\n      console.log('🚌 Real-time driver connected:', event);\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleRealtimeDriverDisconnected = useCallback(\r\n    (event: RealtimeEvent) => {\r\n      console.log('🚌 Real-time driver disconnected:', event);\r\n      const data = event.data;\r\n      removeBus(data.busId);\r\n    },\r\n    [removeBus]\r\n  );\r\n\r\n  const handleRealtimeBusArriving = useCallback(\r\n    (event: RealtimeEvent) => {\r\n      console.log('🚌 Real-time bus arriving:', event);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Handle real-time bus updates\r\n  const handleRealtimeBusUpdate = useCallback(\r\n    (event: RealtimeEvent) => {\r\n      console.log('🚌 Real-time bus update:', event);\r\n      // Update bus information in the store\r\n      const busData = event.data;\r\n      if (busData.new) {\r\n        // Update bus information\r\n        console.log('🔄 Updating bus information:', busData.new);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Handle real-time route updates\r\n  const handleRealtimeRouteUpdate = useCallback(\r\n    (event: RealtimeEvent) => {\r\n      console.log('🛣️ Real-time route update:', event);\r\n      // Update route information in the store\r\n      const routeData = event.data;\r\n      if (routeData.new) {\r\n        // Update route information\r\n        console.log('🔄 Updating route information:', routeData.new);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Real-time connection management\r\n  useEffect(() => {\r\n    const initializeRealtime = async () => {\r\n      try {\r\n        setConnectionState({ connectionStatus: 'connecting' });\r\n        console.log('🔌 Initializing real-time services...');\r\n\r\n        // Initialize the real-time manager\r\n        await realtimeManager.initialize();\r\n\r\n        // Subscribe to real-time events\r\n        realtimeManager.on('bus-location-update', handleRealtimeBusLocationUpdate);\r\n        realtimeManager.on('driver-connected', handleRealtimeDriverConnected);\r\n        realtimeManager.on('driver-disconnected', handleRealtimeDriverDisconnected);\r\n        realtimeManager.on('bus-arriving', handleRealtimeBusArriving);\r\n        realtimeManager.on('bus-update', handleRealtimeBusUpdate);\r\n        realtimeManager.on('route-update', handleRealtimeRouteUpdate);\r\n\r\n        setConnectionState({\r\n          isConnected: true,\r\n          connectionStatus: 'connected',\r\n          connectionError: null,\r\n        });\r\n\r\n        console.log('✅ Real-time services initialized successfully');\r\n      } catch (error) {\r\n        console.error('❌ Real-time initialization failed:', error);\r\n        setConnectionState({\r\n          isConnected: false,\r\n          connectionStatus: 'disconnected',\r\n          connectionError: 'Failed to initialize real-time services',\r\n        });\r\n      }\r\n    };\r\n\r\n    initializeRealtime();\r\n\r\n    return () => {\r\n      realtimeManager.destroy();\r\n    };\r\n  }, [setConnectionState]);\r\n\r\n  // Add routes to map when visible routes change\r\n  useEffect(() => {\r\n    if (isMapInitialized.current && visibleRoutes.length > 0) {\r\n      removeRoutesFromMap();\r\n      addRoutesToMap();\r\n    }\r\n  }, [visibleRoutes, removeRoutesFromMap, addRoutesToMap]);\r\n\r\n  // Update loading state\r\n  useEffect(() => {\r\n    setLoading(routesLoading || busesLoading);\r\n  }, [routesLoading, busesLoading, setLoading]);\r\n\r\n  // Cleanup worker on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      workerService.terminate();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`optimized-student-map-lazy ${className}`}>\r\n      {/* Map Container */}\r\n      <Suspense fallback={\r\n        <div className=\"flex items-center justify-center h-screen\">\r\n          <GlassyCard className=\"p-8\">\r\n            <div className=\"loading-spinner mx-auto mb-4\" />\r\n            <p className=\"text-white text-center\">Loading map...</p>\r\n          </GlassyCard>\r\n        </div>\r\n      }>\r\n        <MapContainer\r\n          onMapLoad={handleMapLoad}\r\n          onMapError={handleMapError}\r\n          onViewportChange={handleViewportChange}\r\n          enableClustering={isClusteringEnabled}\r\n          enableHeatmap={isHeatmapEnabled}\r\n        />\r\n      </Suspense>\r\n\r\n      {/* Bus Markers - Optimized with clustering */}\r\n      <Suspense fallback={null}>\r\n        {isClusteringEnabled && clustersData?.success ? (\r\n          // Render clustered markers\r\n          clustersData.data.map((cluster: any) => (\r\n            <BusMarker\r\n              key={cluster.id}\r\n              map={map.current}\r\n              location={{\r\n                busId: cluster.id,\r\n                driverId: '',\r\n                latitude: cluster.center[1],\r\n                longitude: cluster.center[0],\r\n                timestamp: new Date().toISOString(),\r\n              }}\r\n              busInfo={{\r\n                busNumber: `Cluster ${cluster.count}`,\r\n                driverName: '',\r\n                routeName: '',\r\n              }}\r\n              isConnected={isConnected}\r\n              onMarkerClick={handleBusSelect}\r\n              isClustered={cluster.count > 1}\r\n              clusterCount={cluster.count}\r\n            />\r\n          ))\r\n        ) : (\r\n          // Render individual bus markers\r\n          Object.entries(lastBusLocations).map(([busId, location]) => {\r\n            const bus = busService.getBus(busId);\r\n            if (!bus || !map.current) return null;\r\n\r\n            return (\r\n              <BusMarker\r\n                key={busId}\r\n                map={map.current}\r\n                location={location}\r\n                busInfo={{\r\n                  busNumber: bus.busNumber,\r\n                  driverName: bus.driverName,\r\n                  routeName: bus.routeName,\r\n                }}\r\n                isConnected={isConnected}\r\n                onMarkerClick={handleBusSelect}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </Suspense>\r\n\r\n      {/* Connection Status Overlay */}\r\n      <AnimatePresence>\r\n        {connectionError && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -50 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -50 }}\r\n            className=\"absolute top-4 left-4 z-50\"\r\n          >\r\n            <GlassyCard className=\"p-4 bg-red-500/20 border-red-400/30\">\r\n              <p className=\"text-red-200 text-sm\">{connectionError}</p>\r\n            </GlassyCard>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Loading Overlay */}\r\n      <AnimatePresence>\r\n        {isLoading && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"absolute inset-0 bg-black/50 flex items-center justify-center z-40\"\r\n          >\r\n            <GlassyCard className=\"p-8\">\r\n              <div className=\"loading-spinner mx-auto mb-4\" />\r\n              <p className=\"text-white text-center\">Loading map...</p>\r\n            </GlassyCard>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Real-time Status Indicator */}\r\n      <div className=\"absolute top-4 right-4 z-50\">\r\n        <GlassyCard className=\"p-4\">\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"text-white text-sm font-semibold\">Real-time Status</h4>\r\n            <div className=\"space-y-1\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div\r\n                  className={`w-2 h-2 rounded-full ${\r\n                    isConnected ? 'bg-green-400' : 'bg-red-400'\r\n                  }`}\r\n                />\r\n                <span className=\"text-white text-xs\">\r\n                  {connectionStatus === 'connected' && 'WebSocket'}\r\n                  {connectionStatus === 'connecting' && 'Connecting...'}\r\n                  {connectionStatus === 'disconnected' && 'Disconnected'}\r\n                  {connectionStatus === 'reconnecting' && 'Reconnecting...'}\r\n                </span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div className=\"w-2 h-2 rounded-full bg-blue-400\" />\r\n                <span className=\"text-white text-xs\">Supabase Realtime</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div className=\"w-2 h-2 rounded-full bg-purple-400\" />\r\n                <span className=\"text-white text-xs\">SSE</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </GlassyCard>\r\n      </div>\r\n\r\n      {/* Spatial Controls Panel */}\r\n      <div className=\"absolute top-4 left-4 z-50 w-80\">\r\n        <GlassyCard className=\"p-4\">\r\n          <h3 className=\"text-white font-semibold mb-3\">Spatial Controls</h3>\r\n          <div className=\"space-y-2\">\r\n            <button\r\n              onClick={toggleClustering}\r\n              className={`w-full px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n                isClusteringEnabled\r\n                  ? 'bg-blue-600 text-white'\r\n                  : 'bg-gray-600 text-gray-300'\r\n              }`}\r\n            >\r\n              {isClusteringEnabled ? '✅' : '❌'} Clustering\r\n            </button>\r\n            <button\r\n              onClick={toggleHeatmap}\r\n              className={`w-full px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n                isHeatmapEnabled\r\n                  ? 'bg-green-600 text-white'\r\n                  : 'bg-gray-600 text-gray-300'\r\n              }`}\r\n            >\r\n              {isHeatmapEnabled ? '✅' : '❌'} Heatmap\r\n            </button>\r\n            <div className=\"text-xs text-white/70 mt-2\">\r\n              <p>Viewport: {visibleBuses.length} buses, {visibleRoutes.length} routes</p>\r\n              <p>Clusters: {busClusters.length}</p>\r\n              <p>Zoom: {viewport.zoom.toFixed(1)}</p>\r\n            </div>\r\n          </div>\r\n        </GlassyCard>\r\n      </div>\r\n\r\n      {/* Bus List Panel */}\r\n      <div className=\"absolute top-4 left-4 z-50 w-80\" style={{ top: '200px' }}>\r\n        <GlassyCard className=\"p-4\">\r\n          <h3 className=\"text-white font-semibold mb-3\">Active Buses ({filteredBuses.length})</h3>\r\n          <VirtualBusList\r\n            buses={filteredBuses}\r\n            containerHeight={300}\r\n            onBusSelect={handleBusSelect}\r\n            selectedBusId={selectedBusId || undefined}\r\n          />\r\n        </GlassyCard>\r\n      </div>\r\n\r\n      {/* Center Map Button */}\r\n      <button\r\n        onClick={centerMapOnBuses}\r\n        className=\"absolute bottom-4 right-4 z-50 btn-primary\"\r\n        disabled={Object.keys(lastBusLocations).length === 0}\r\n      >\r\n        Center Map\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptimizedStudentMapLazy;\r\n"],"file":"assets/js/OptimizedStudentMapLazy-BmbrWh2r.js"}