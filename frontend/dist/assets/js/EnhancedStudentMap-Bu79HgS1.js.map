{"version":3,"file":"EnhancedStudentMap-Bu79HgS1.js","sources":["../../../src/services/busService.ts","../../../src/components/EnhancedStudentMap.tsx"],"sourcesContent":["import { BusLocation, BusInfo, Bus } from '../types';\r\nimport { IBusService } from './interfaces/IBusService';\r\nimport { apiService } from './api';\r\n\r\ninterface BusData {\r\n  [busId: string]: BusInfo;\r\n}\r\n\r\ninterface PreviousLocation {\r\n  latitude: number;\r\n  longitude: number;\r\n  timestamp: string;\r\n}\r\n\r\nclass BusService implements IBusService {\r\n  private buses: BusData = {};\r\n  private previousLocations: { [busId: string]: PreviousLocation } = {};\r\n\r\n  // Calculate speed between two points using Haversine formula\r\n  private calculateSpeed(\r\n    lat1: number,\r\n    lon1: number,\r\n    lat2: number,\r\n    lon2: number,\r\n    timeDiffMs: number\r\n  ): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = this.toRadians(lat2 - lat1);\r\n    const dLon = this.toRadians(lon2 - lon1);\r\n\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(this.toRadians(lat1)) *\r\n        Math.cos(this.toRadians(lat2)) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distance = R * c; // Distance in kilometers\r\n\r\n    const timeDiffHours = timeDiffMs / (1000 * 60 * 60); // Convert to hours\r\n    const speed = distance / timeDiffHours; // Speed in km/h\r\n\r\n    return Math.round(speed * 10) / 10; // Round to 1 decimal place\r\n  }\r\n\r\n  private toRadians(degrees: number): number {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  // Update bus location and calculate speed\r\n  updateBusLocation(location: BusLocation): void {\r\n    const { busId, latitude, longitude, timestamp } = location;\r\n\r\n    // Get previous location for speed calculation\r\n    const previousLocation = this.previousLocations[busId];\r\n\r\n    let speed: number | undefined;\r\n    if (previousLocation) {\r\n      const timeDiff =\r\n        new Date(timestamp).getTime() -\r\n        new Date(previousLocation.timestamp).getTime();\r\n      if (timeDiff > 0) {\r\n        speed = this.calculateSpeed(\r\n          previousLocation.latitude,\r\n          previousLocation.longitude,\r\n          latitude,\r\n          longitude,\r\n          timeDiff\r\n        );\r\n      }\r\n    }\r\n\r\n    // Update or create bus info\r\n    if (!this.buses[busId]) {\r\n      this.buses[busId] = {\r\n        busId,\r\n        busNumber: `Bus ${busId}`, // Default name, will be updated from API\r\n        routeName: 'Route TBD', // Default route, will be updated from API\r\n        driverName: 'Driver TBD', // Default name, will be updated from API\r\n        currentLocation: {\r\n          ...location,\r\n          speed: speed || location.speed,\r\n        },\r\n        eta: location.eta?.estimated_arrival_minutes,\r\n      };\r\n    } else {\r\n      this.buses[busId].currentLocation = {\r\n        ...location,\r\n        speed: speed || location.speed,\r\n      };\r\n      // Update ETA from location data\r\n      this.buses[busId].eta = location.eta?.estimated_arrival_minutes;\r\n    }\r\n\r\n    // Store current location as previous for next calculation\r\n    this.previousLocations[busId] = {\r\n      latitude,\r\n      longitude,\r\n      timestamp,\r\n    };\r\n  }\r\n\r\n  // Get bus information by ID\r\n  getBus(busId: string): BusInfo | null {\r\n    return this.buses[busId] || null;\r\n  }\r\n\r\n  // Get all buses\r\n  getAllBuses(): BusInfo[] {\r\n    return Object.values(this.buses);\r\n  }\r\n\r\n  // Get buses by route name\r\n  getBusesByRoute(routeName: string): BusInfo[] {\r\n    return Object.values(this.buses).filter(\r\n      (bus) => bus.routeName === routeName\r\n    );\r\n  }\r\n\r\n  // Sync bus data from API\r\n  async syncBusFromAPI(busId: string, apiData?: Bus): Promise<void> {\r\n    try {\r\n      // If no API data provided, fetch it from the backend\r\n      if (!apiData) {\r\n        const response = await apiService.getBusInfo(busId);\r\n        if (response.success && response.data) {\r\n          apiData = response.data;\r\n        } else {\r\n          console.error('❌ Failed to fetch bus data from API for bus:', busId);\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (this.buses[busId]) {\r\n        // Update existing bus with API data\r\n        this.buses[busId] = {\r\n          ...this.buses[busId],\r\n          busNumber: apiData.number_plate || apiData.code || `Bus ${busId}`,\r\n          routeName: apiData.route_name || 'Route TBD',\r\n          driverName: apiData.driver_full_name || 'Driver TBD',\r\n        };\r\n      } else {\r\n        // Create new bus from API data\r\n        this.buses[busId] = {\r\n          busId,\r\n          busNumber: apiData.number_plate || apiData.code || `Bus ${busId}`,\r\n          routeName: apiData.route_name || 'Route TBD',\r\n          driverName: apiData.driver_full_name || 'Driver TBD',\r\n          currentLocation: {\r\n            busId,\r\n            driverId: apiData.assigned_driver_id || '',\r\n            latitude: 0,\r\n            longitude: 0,\r\n            timestamp: new Date().toISOString(),\r\n          },\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error syncing bus data from API:', error);\r\n    }\r\n  }\r\n\r\n  // Sync all buses from API\r\n  async syncAllBusesFromAPI(): Promise<void> {\r\n    try {\r\n      const response = await apiService.getAllBuses();\r\n      if (response.success && response.data) {\r\n        response.data.forEach((bus: Bus) => {\r\n          this.syncBusFromAPI(bus.id, bus);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error syncing all buses from API:', error);\r\n    }\r\n  }\r\n\r\n  // Clear all buses\r\n  clearBuses(): void {\r\n    this.buses = {};\r\n    this.previousLocations = {};\r\n  }\r\n\r\n  // Get bus statistics\r\n  getBusStats(): {\r\n    totalBuses: number;\r\n    activeBuses: number;\r\n    busesByRoute: { [routeName: string]: number };\r\n  } {\r\n    const buses = Object.values(this.buses);\r\n    const busesByRoute: { [routeName: string]: number } = {};\r\n\r\n    buses.forEach((bus) => {\r\n      const routeName = bus.routeName;\r\n      busesByRoute[routeName] = (busesByRoute[routeName] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      totalBuses: buses.length,\r\n      activeBuses: buses.filter((bus) => bus.currentLocation).length,\r\n      busesByRoute,\r\n    };\r\n  }\r\n\r\n  // Get buses with recent activity (within last 5 minutes)\r\n  getActiveBuses(): BusInfo[] {\r\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n    return Object.values(this.buses).filter((bus) => {\r\n      const lastUpdate = new Date(bus.currentLocation.timestamp);\r\n      return lastUpdate > fiveMinutesAgo;\r\n    });\r\n  }\r\n\r\n  // Get bus location history (simplified - in real app, this would come from API)\r\n  getBusLocationHistory(busId: string): BusLocation[] {\r\n    // This is a simplified implementation\r\n    // In a real application, this would fetch from the backend API\r\n    const bus = this.buses[busId];\r\n    if (!bus) return [];\r\n\r\n    return [bus.currentLocation];\r\n  }\r\n\r\n  // Update bus ETA\r\n  updateBusETA(busId: string, eta: number): void {\r\n    if (this.buses[busId]) {\r\n      this.buses[busId].eta = eta;\r\n    }\r\n  }\r\n\r\n  // Get buses near a specific location\r\n  getBusesNearLocation(\r\n    latitude: number,\r\n    longitude: number,\r\n    radiusKm: number = 5\r\n  ): BusInfo[] {\r\n    return Object.values(this.buses).filter((bus) => {\r\n      const busLat = bus.currentLocation.latitude;\r\n      const busLng = bus.currentLocation.longitude;\r\n\r\n      // Calculate distance using Haversine formula\r\n      const R = 6371; // Earth's radius in kilometers\r\n      const dLat = this.toRadians(busLat - latitude);\r\n      const dLon = this.toRadians(busLng - longitude);\r\n\r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(this.toRadians(latitude)) *\r\n          Math.cos(this.toRadians(busLat)) *\r\n          Math.sin(dLon / 2) *\r\n          Math.sin(dLon / 2);\r\n\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const distance = R * c;\r\n\r\n      return distance <= radiusKm;\r\n    });\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const busService = new BusService();\r\nexport default busService;\r\nexport type { BusInfo } from '../types';\r\n","import React, {\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n} from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport maplibregl from 'maplibre-gl';\r\nimport { websocketService, BusLocation } from '../services/websocket';\r\nimport { busService, BusInfo } from '../services/busService';\r\nimport { apiService } from '../services/api';\r\nimport { authService } from '../services/authService';\r\nimport GlassyCard from './ui/GlassyCard';\r\nimport './StudentMap.css';\r\nimport { Route } from '../types';\r\n\r\ninterface EnhancedStudentMapProps {\r\n  className?: string;\r\n}\r\n\r\nconst EnhancedStudentMap: React.FC<EnhancedStudentMapProps> = ({\r\n  className = '',\r\n}) => {\r\n  // Map references\r\n  const mapContainer = useRef<HTMLDivElement>(null);\r\n  const map = useRef<maplibregl.Map | null>(null);\r\n  const markers = useRef<{ [busId: string]: maplibregl.Marker }>({});\r\n  const isMapInitialized = useRef(false);\r\n  const addedRoutes = useRef<Set<string>>(new Set());\r\n\r\n  // State management\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [connectionError, setConnectionError] = useState<string | null>(null);\r\n  const [connectionStatus, setConnectionStatus] = useState<\r\n    'connected' | 'connecting' | 'disconnected' | 'reconnecting'\r\n  >('disconnected');\r\n  const [buses, setBuses] = useState<BusInfo[]>([]);\r\n  const [routes, setRoutes] = useState<Route[]>([]);\r\n  const [selectedRoute, setSelectedRoute] = useState<string>('all');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [lastBusLocations, setLastBusLocations] = useState<{\r\n    [busId: string]: BusLocation;\r\n  }>({});\r\n\r\n  // Navbar state\r\n  const [isNavbarCollapsed, setIsNavbarCollapsed] = useState(false);\r\n  const [isRouteFilterOpen, setIsRouteFilterOpen] = useState(true);\r\n  const [isActiveBusesOpen, setIsActiveBusesOpen] = useState(true);\r\n\r\n  // Load routes from API\r\n  const loadRoutes = useCallback(async () => {\r\n    try {\r\n      console.log('🔄 Loading routes from backend API...');\r\n      const response = await apiService.getRoutes();\r\n      if (response.success && response.data) {\r\n        console.log(\r\n          '✅ Routes loaded from backend:',\r\n          response.data.length,\r\n          'routes'\r\n        );\r\n        setRoutes(response.data as unknown as Route[]);\r\n\r\n        // Log route details for debugging\r\n        response.data.forEach((route: Route) => {\r\n          console.log(\r\n            `📍 Route: ${route.name} (ID: ${route.id}) - Active: ${route.is_active}`\r\n          );\r\n        });\r\n      } else {\r\n        console.error('❌ Failed to load routes:', response);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error loading routes:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Remove routes from map\r\n  const removeRoutesFromMap = useCallback(() => {\r\n    if (!map.current) return;\r\n\r\n    routes.forEach((route) => {\r\n      const routeId = `route-${route.id}`;\r\n\r\n      try {\r\n        if (map.current!.getLayer(routeId)) {\r\n          map.current!.removeLayer(routeId);\r\n        }\r\n        if (map.current!.getSource(routeId)) {\r\n          map.current!.removeSource(routeId);\r\n        }\r\n        addedRoutes.current.delete(routeId);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Error removing route ${route.name}:`, error);\r\n      }\r\n    });\r\n  }, [routes]);\r\n\r\n  // Add routes to map\r\n  const addRoutesToMap = useCallback(() => {\r\n    if (!map.current || routes.length === 0) return;\r\n\r\n    console.log('🗺️ Adding routes to map:', routes.length, 'routes');\r\n\r\n    routes.forEach((route, index) => {\r\n      const routeId = `route-${route.id}`;\r\n\r\n      if (addedRoutes.current.has(routeId) || map.current!.getSource(routeId)) {\r\n        console.log(`🗺️ Route ${routeId} already exists, skipping...`);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        map.current!.addSource(routeId, {\r\n          type: 'geojson',\r\n          data: {\r\n            type: 'Feature',\r\n            properties: {\r\n              name: route.name,\r\n              description: route.description,\r\n              distance: route.distance_km,\r\n              duration: route.estimated_duration_minutes,\r\n            },\r\n            geometry: route.stops,\r\n          },\r\n        });\r\n\r\n        map.current!.addLayer({\r\n          id: routeId,\r\n          type: 'line',\r\n          source: routeId,\r\n          layout: {\r\n            'line-join': 'round',\r\n            'line-cap': 'round',\r\n          },\r\n          paint: {\r\n            'line-color': `hsl(${(index * 137.5) % 360}, 70%, 50%)`,\r\n            'line-width': 4,\r\n            'line-opacity': 0.8,\r\n          },\r\n        });\r\n\r\n        console.log(`🗺️ Added route ${route.name} to map`);\r\n        addedRoutes.current.add(routeId);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Error adding route ${route.name}:`, error);\r\n      }\r\n    });\r\n  }, [routes]);\r\n\r\n  // Update bus marker on map\r\n  const updateBusMarker = useCallback(\r\n    (location: BusLocation) => {\r\n      if (!map.current) return;\r\n\r\n      const { busId, latitude, longitude, speed } = location;\r\n      const bus = busService.getBus(busId);\r\n\r\n      if (!bus) return;\r\n\r\n      if (!markers.current[busId]) {\r\n        const el = document.createElement('div');\r\n        el.className = 'bus-marker';\r\n        el.innerHTML = `\r\n        <div class=\"bus-marker-pin\">\r\n          <div class=\"bus-marker-icon\">🚌</div>\r\n          <div class=\"bus-marker-pulse\"></div>\r\n        </div>\r\n        <div class=\"bus-marker-content\">\r\n          <div class=\"bus-number\">${bus.busNumber}</div>\r\n          <div class=\"bus-speed\">${speed ? `${speed} km/h` : 'N/A'}</div>\r\n          <div class=\"bus-eta\">${location.eta ? `ETA: ${location.eta.estimated_arrival_minutes} min` : 'ETA: N/A'}</div>\r\n        </div>\r\n      `;\r\n\r\n        const marker = new maplibregl.Marker({\r\n          element: el,\r\n          anchor: 'center',\r\n        })\r\n          .setLngLat([longitude, latitude])\r\n          .addTo(map.current);\r\n\r\n        const popup = new maplibregl.Popup({\r\n          offset: 25,\r\n          className: 'bus-popup-container',\r\n        }).setHTML(`\r\n        <div class=\"bus-popup\">\r\n          <div class=\"bus-popup-header\">\r\n            <h3>🚌 Bus ${bus.busNumber}</h3>\r\n            <div class=\"bus-status ${isConnected ? 'online' : 'offline'}\">\r\n              ${isConnected ? '🟢 Online' : '🔴 Offline'}\r\n            </div>\r\n          </div>\r\n          <div class=\"bus-popup-content\">\r\n            <div class=\"bus-info\">\r\n              <p><strong>Driver:</strong> ${bus.driverName || 'N/A'}</p>\r\n              <p><strong>Route:</strong> ${bus.routeName || 'N/A'}</p>\r\n              <p><strong>Speed:</strong> ${speed ? `${speed} km/h` : 'N/A'}</p>\r\n              <p><strong>Last Update:</strong> ${new Date(location.timestamp).toLocaleTimeString()}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `);\r\n\r\n        marker.setPopup(popup);\r\n        markers.current[busId] = marker;\r\n      } else {\r\n        markers.current[busId].setLngLat([longitude, latitude]);\r\n\r\n        const popup = markers.current[busId].getPopup();\r\n        popup.setHTML(`\r\n        <div class=\"bus-popup\">\r\n          <div class=\"bus-popup-header\">\r\n            <h3>🚌 Bus ${bus.busNumber}</h3>\r\n            <div class=\"bus-status ${isConnected ? 'online' : 'offline'}\">\r\n              ${isConnected ? '🟢 Online' : '🔴 Offline'}\r\n            </div>\r\n          </div>\r\n          <div class=\"bus-popup-content\">\r\n            <div class=\"bus-info\">\r\n              <p><strong>Driver:</strong> ${bus.driverName || 'N/A'}</p>\r\n              <p><strong>Route:</strong> ${bus.routeName || 'N/A'}</p>\r\n              <p><strong>Speed:</strong> ${speed ? `${speed} km/h` : 'N/A'}</p>\r\n              <p><strong>Last Update:</strong> ${new Date(location.timestamp).toLocaleTimeString()}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `);\r\n      }\r\n    },\r\n    [isConnected]\r\n  );\r\n\r\n  // Remove bus marker from map\r\n  const removeBusMarker = useCallback((busId: string) => {\r\n    if (markers.current[busId]) {\r\n      markers.current[busId].remove();\r\n      delete markers.current[busId];\r\n    }\r\n  }, []);\r\n\r\n  // Center map on all buses\r\n  const centerMapOnBuses = useCallback(() => {\r\n    if (!map.current || Object.keys(lastBusLocations).length === 0) return;\r\n\r\n    const coordinates = Object.values(lastBusLocations).map(\r\n      (location) => [location.longitude, location.latitude] as [number, number]\r\n    );\r\n\r\n    if (coordinates.length === 1) {\r\n      map.current.flyTo({\r\n        center: coordinates[0],\r\n        zoom: 16,\r\n        duration: 2000,\r\n      });\r\n    } else if (coordinates.length > 1) {\r\n      const bounds = new maplibregl.LngLatBounds();\r\n      coordinates.forEach((coord) => bounds.extend(coord));\r\n\r\n      map.current.fitBounds(bounds, {\r\n        padding: 50,\r\n        duration: 2000,\r\n      });\r\n    }\r\n  }, [lastBusLocations]);\r\n\r\n  // Handle bus location updates\r\n  const handleBusLocationUpdate = useCallback(\r\n    (location: BusLocation) => {\r\n      console.log('📍 Bus location update:', location);\r\n\r\n      setLastBusLocations((prev) => ({\r\n        ...prev,\r\n        [location.busId]: location,\r\n      }));\r\n\r\n      updateBusMarker(location);\r\n    },\r\n    [updateBusMarker]\r\n  );\r\n\r\n  const handleDriverConnected = useCallback(\r\n    (data: { driverId: string; busId: string; timestamp: string }) => {\r\n      console.log('🚌 Driver connected:', data);\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleDriverDisconnected = useCallback(\r\n    (data: { driverId: string; busId: string; timestamp: string }) => {\r\n      console.log('🚌 Driver disconnected:', data);\r\n      removeBusMarker(data.busId);\r\n    },\r\n    [removeBusMarker]\r\n  );\r\n\r\n  const handleBusArriving = useCallback(\r\n    (data: {\r\n      busId: string;\r\n      routeId: string;\r\n      location: [number, number];\r\n      timestamp: string;\r\n    }) => {\r\n      console.log('🚌 Bus arriving:', data);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Initialize map\r\n  useEffect(() => {\r\n    if (isMapInitialized.current || !mapContainer.current) {\r\n      return;\r\n    }\r\n\r\n    console.log('🗺️ Initializing map...');\r\n    isMapInitialized.current = true;\r\n\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: {\r\n        version: 8,\r\n        sources: {\r\n          osm: {\r\n            type: 'raster',\r\n            tiles: [\r\n              'https://tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n              'https://a.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n              'https://b.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n              'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n            ],\r\n            tileSize: 256,\r\n            attribution: '© OpenStreetMap contributors',\r\n            maxzoom: 19,\r\n          },\r\n        },\r\n        layers: [\r\n          {\r\n            id: 'osm-tiles',\r\n            type: 'raster',\r\n            source: 'osm',\r\n            minzoom: 0,\r\n            maxzoom: 19,\r\n          },\r\n        ],\r\n      },\r\n      center: [72.571, 23.025],\r\n      zoom: 12,\r\n      bearing: 0,\r\n      pitch: 0,\r\n      attributionControl: true,\r\n      maxZoom: 19,\r\n      minZoom: 1,\r\n      preserveDrawingBuffer: false,\r\n      antialias: true,\r\n      dragRotate: false,\r\n    });\r\n\r\n    map.current.addControl(new maplibregl.NavigationControl(), 'top-right');\r\n\r\n    map.current.once('load', () => {\r\n      console.log('🗺️ Map loaded successfully');\r\n      setIsLoading(false);\r\n      loadRoutes();\r\n    });\r\n\r\n    map.current.on('error', (e) => {\r\n      console.error('❌ Map error:', e);\r\n    });\r\n\r\n    return () => {\r\n      if (map.current) {\r\n        map.current.remove();\r\n        map.current = null;\r\n        isMapInitialized.current = false;\r\n        addedRoutes.current.clear();\r\n        markers.current = {};\r\n      }\r\n    };\r\n  }, [loadRoutes]);\r\n\r\n  // Connect to WebSocket\r\n  useEffect(() => {\r\n    let reconnectTimeout: NodeJS.Timeout;\r\n    let statusInterval: NodeJS.Timeout;\r\n    let reconnectAttempts = 0;\r\n\r\n    const connectWebSocket = async () => {\r\n      try {\r\n        setConnectionError(null);\r\n        setConnectionStatus('connecting');\r\n        \r\n        // Set client type for student map\r\n        websocketService.setClientType('student');\r\n        \r\n        // Reset WebSocket service state before connecting\r\n        websocketService.resetState();\r\n        \r\n        await websocketService.connect();\r\n        setIsConnected(true);\r\n        setConnectionStatus('connected');\r\n\r\n        websocketService.onBusLocationUpdate(handleBusLocationUpdate);\r\n        websocketService.onDriverConnected(handleDriverConnected);\r\n        websocketService.onDriverDisconnected(handleDriverDisconnected);\r\n        // Emit student connection event\r\n        websocketService.socket?.emit('student:connect');\r\n        \r\n        // Set client type for student connection\r\n        websocketService.setClientType('student');\r\n        \r\n        websocketService.onStudentConnected(() => {\r\n          console.log('✅ Student connected to WebSocket');\r\n        });\r\n        websocketService.onBusArriving(handleBusArriving);\r\n\r\n        const checkConnectionStatus = () => {\r\n          const status = websocketService.getConnectionStatus();\r\n          if (!status && connectionStatus === 'connected') {\r\n            setConnectionStatus('disconnected');\r\n            setIsConnected(false);\r\n          }\r\n        };\r\n\r\n        statusInterval = setInterval(checkConnectionStatus, 10000);\r\n\r\n        const loadBuses = async () => {\r\n          try {\r\n            while (!authService.isInitialized()) {\r\n              await new Promise((resolve) => setTimeout(resolve, 100));\r\n            }\r\n\r\n            const response = await apiService.getAllBuses();\r\n            if (response.success && response.data) {\r\n              console.log(\r\n                '📊 Initial bus data from API:',\r\n                response.data.length,\r\n                'buses'\r\n              );\r\n\r\n              response.data.forEach((apiBus: any) => {\r\n                const busId = apiBus.bus_id || apiBus.id;\r\n                if (busId) {\r\n                  busService.syncBusFromAPI(busId, apiBus);\r\n                }\r\n              });\r\n\r\n              const updatedBuses = busService.getAllBuses();\r\n              setBuses(updatedBuses);\r\n              console.log(\r\n                '✅ Initial buses loaded and synced:',\r\n                response.data.length\r\n              );\r\n            }\r\n          } catch (error) {\r\n            console.error('❌ Error loading initial buses:', error);\r\n          }\r\n        };\r\n\r\n        loadBuses();\r\n      } catch (error) {\r\n        console.error('❌ WebSocket connection failed:', error);\r\n        setConnectionError('Failed to connect to real-time updates');\r\n        setIsConnected(false);\r\n        setConnectionStatus('disconnected');\r\n\r\n        // Retry connection with exponential backoff\r\n        const retryDelay = Math.min(5000 * Math.pow(2, Math.min(reconnectAttempts, 3)), 30000);\r\n        console.log(`🔄 Retrying WebSocket connection in ${retryDelay}ms...`);\r\n        \r\n        reconnectAttempts++;\r\n        reconnectTimeout = setTimeout(() => {\r\n          console.log('🔄 Retrying WebSocket connection...');\r\n          setConnectionStatus('reconnecting');\r\n          connectWebSocket();\r\n        }, retryDelay);\r\n      }\r\n    };\r\n\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      if (reconnectTimeout) {\r\n        clearTimeout(reconnectTimeout);\r\n      }\r\n      if (statusInterval) {\r\n        clearInterval(statusInterval);\r\n      }\r\n      websocketService.softDisconnect();\r\n    };\r\n  }, [\r\n    handleBusArriving,\r\n    handleBusLocationUpdate,\r\n    handleDriverConnected,\r\n    handleDriverDisconnected,\r\n  ]);\r\n\r\n  // Get filtered buses based on selected route and live locations\r\n  const filteredBuses = useMemo(() => {\r\n    // First filter to only buses with live locations (within last 5 minutes)\r\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n    const busesWithLiveLocations = buses.filter((bus) => {\r\n      const location = lastBusLocations[bus.busId];\r\n      if (!location) return false;\r\n      \r\n      const lastUpdate = new Date(location.timestamp);\r\n      return lastUpdate > fiveMinutesAgo;\r\n    });\r\n\r\n    // Then filter by selected route\r\n    if (selectedRoute === 'all') {\r\n      return busesWithLiveLocations;\r\n    }\r\n\r\n    return busesWithLiveLocations.filter((bus) => {\r\n      const busRoute = routes.find((route) => route.name === bus.routeName);\r\n      return busRoute && busRoute.id === selectedRoute;\r\n    });\r\n  }, [buses, selectedRoute, routes, lastBusLocations]);\r\n\r\n  // Get unique routes for filter\r\n  const availableRoutes = useMemo(() => {\r\n    return routes.map((route: Route) => ({\r\n      id: route.id,\r\n      name: route.name,\r\n      description: route.description,\r\n    }));\r\n  }, [routes]);\r\n\r\n  // Add routes to map when routes are loaded\r\n  useEffect(() => {\r\n    if (routes.length > 0 && map.current && map.current.isStyleLoaded()) {\r\n      removeRoutesFromMap();\r\n      addRoutesToMap();\r\n    }\r\n\r\n    return () => {\r\n      if (map.current) {\r\n        removeRoutesFromMap();\r\n      }\r\n    };\r\n  }, [routes, addRoutesToMap, removeRoutesFromMap]);\r\n\r\n  return (\r\n    <div className={`relative h-screen ${className}`}>\r\n      {/* Loading overlay */}\r\n      {isLoading && (\r\n        <div className=\"loading-overlay\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n            <p className=\"mt-4 text-gray-600\">Loading map...</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Error overlay */}\r\n      {connectionError && (\r\n        <div className=\"error-overlay\">\r\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n            <div className=\"flex\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg\r\n                  className=\"h-5 w-5 text-red-400\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  fill=\"currentColor\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                    clipRule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-3\">\r\n                <h3 className=\"text-sm font-medium text-red-800\">\r\n                  Connection Error\r\n                </h3>\r\n                <p className=\"text-sm text-red-700 mt-1\">{connectionError}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Map container */}\r\n      <div ref={mapContainer} className=\"map-container rounded-lg\" />\r\n\r\n      {/* Collapsible Glassmorphic Navbar */}\r\n      <motion.div\r\n        initial={{ x: -400 }}\r\n        animate={{ x: isNavbarCollapsed ? -350 : 0 }}\r\n        transition={{ duration: 0.3, ease: 'easeInOut' }}\r\n        className=\"absolute top-4 left-4 z-30\"\r\n      >\r\n        {/* Collapse/Expand Button (always visible) */}\r\n        <button\r\n          onClick={() => setIsNavbarCollapsed(!isNavbarCollapsed)}\r\n          className=\"absolute -right-12 top-0 p-3 bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg hover:bg-white/20 transition-all duration-200 z-40\"\r\n        >\r\n          <svg\r\n            className={`w-5 h-5 text-white transition-transform duration-200 ${\r\n              isNavbarCollapsed ? 'rotate-180' : ''\r\n            }`}\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M15 19l-7-7 7-7\"\r\n            />\r\n          </svg>\r\n        </button>\r\n        <GlassyCard\r\n          variant=\"premium\"\r\n          glow={true}\r\n          className=\"w-80 max-h-[calc(100vh-2rem)] overflow-hidden\"\r\n        >\r\n          {/* Navbar Header */}\r\n          <div className=\"flex items-center justify-between p-4 border-b border-white/20\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\r\n              <h2 className=\"text-lg font-bold text-gray-900\">\r\n                Student Live Tracking\r\n              </h2>\r\n            </div>\r\n            <div className=\"text-xs text-gray-600 bg-white/50 px-2 py-1 rounded\">\r\n              Live Map\r\n            </div>\r\n          </div>\r\n\r\n          {/* Navbar Content */}\r\n          <div className=\"p-4 space-y-4 max-h-[calc(100vh-8rem)] overflow-y-auto\">\r\n            {/* Connection Status */}\r\n            <div className=\"flex items-center justify-between p-3 bg-blue-50/80 rounded-lg border border-blue-200/50\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div\r\n                  className={`w-2 h-2 rounded-full ${\r\n                    isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'\r\n                  }`}\r\n                ></div>\r\n                <span className=\"text-sm text-gray-800 font-medium\">\r\n                  {isConnected ? 'Live Connected' : 'Offline'}\r\n                </span>\r\n              </div>\r\n              <span className=\"text-xs text-gray-600 bg-white/70 px-2 py-1 rounded\">\r\n                {filteredBuses.length} buses\r\n              </span>\r\n            </div>\r\n\r\n            {/* Route Filter Section */}\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-sm font-semibold text-gray-800\">\r\n                  Route Filter\r\n                </h3>\r\n                <button\r\n                  onClick={() => setIsRouteFilterOpen(!isRouteFilterOpen)}\r\n                  className=\"p-1 hover:bg-gray-100 rounded transition-colors duration-200\"\r\n                >\r\n                  <svg\r\n                    className={`w-4 h-4 text-gray-600 transition-transform duration-200 ${\r\n                      isRouteFilterOpen ? 'rotate-180' : ''\r\n                    }`}\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M19 9l-7 7-7-7\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n\r\n              <AnimatePresence>\r\n                {isRouteFilterOpen && (\r\n                  <motion.div\r\n                    initial={{ height: 0, opacity: 0 }}\r\n                    animate={{ height: 'auto', opacity: 1 }}\r\n                    exit={{ height: 0, opacity: 0 }}\r\n                    transition={{ duration: 0.2 }}\r\n                    className=\"space-y-3\"\r\n                  >\r\n                    <select\r\n                      value={selectedRoute}\r\n                      onChange={(e) => setSelectedRoute(e.target.value)}\r\n                      className=\"w-full px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-all duration-200\"\r\n                    >\r\n                      <option value=\"all\">All Routes ({routes.length})</option>\r\n                      {availableRoutes.map((route) => (\r\n                        <option key={route.id} value={route.id}>\r\n                          {route.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n\r\n                    <button\r\n                      onClick={centerMapOnBuses}\r\n                      disabled={filteredBuses.length === 0}\r\n                      className=\"w-full px-3 py-2 bg-blue-600 hover:bg-blue-700 border border-blue-600 rounded-lg text-white font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      📍 Center on Buses ({filteredBuses.length})\r\n                    </button>\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </div>\r\n\r\n            {/* Active Buses Section */}\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-sm font-semibold text-gray-800\">\r\n                  Active Buses\r\n                </h3>\r\n                <button\r\n                  onClick={() => setIsActiveBusesOpen(!isActiveBusesOpen)}\r\n                  className=\"p-1 hover:bg-gray-100 rounded transition-colors duration-200\"\r\n                >\r\n                  <svg\r\n                    className={`w-4 h-4 text-gray-600 transition-transform duration-200 ${\r\n                      isActiveBusesOpen ? 'rotate-180' : ''\r\n                    }`}\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M19 9l-7 7-7-7\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n\r\n              <AnimatePresence>\r\n                {isActiveBusesOpen && (\r\n                  <motion.div\r\n                    initial={{ height: 0, opacity: 0 }}\r\n                    animate={{ height: 'auto', opacity: 1 }}\r\n                    exit={{ height: 0, opacity: 0 }}\r\n                    transition={{ duration: 0.2 }}\r\n                    className=\"space-y-2 max-h-64 overflow-y-auto\"\r\n                  >\r\n                    {filteredBuses.length === 0 ? (\r\n                      <div className=\"text-center py-4\">\r\n                        <div className=\"text-gray-400 text-2xl mb-2\">🚌</div>\r\n                        <p className=\"text-gray-600 text-sm\">\r\n                          No buses tracking\r\n                        </p>\r\n                        <p className=\"text-gray-500 text-xs mt-1\">\r\n                          Check connection status\r\n                        </p>\r\n                      </div>\r\n                    ) : (\r\n                      filteredBuses.map((bus) => {\r\n                        const location = lastBusLocations[bus.busId];\r\n                        return (\r\n                          <motion.div\r\n                            key={bus.busId}\r\n                            initial={{ opacity: 0, y: 10 }}\r\n                            animate={{ opacity: 1, y: 0 }}\r\n                            className=\"p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 hover:border-blue-300 cursor-pointer transition-all duration-200 shadow-sm\"\r\n                            onClick={() => {\r\n                              const location = lastBusLocations[bus.busId];\r\n                              if (location && map.current) {\r\n                                map.current.flyTo({\r\n                                  center: [\r\n                                    location.longitude,\r\n                                    location.latitude,\r\n                                  ],\r\n                                  zoom: 16,\r\n                                  duration: 1000,\r\n                                });\r\n                                const marker = markers.current[bus.busId];\r\n                                if (marker) {\r\n                                  marker.getPopup().addTo(map.current);\r\n                                }\r\n                              }\r\n                            }}\r\n                          >\r\n                            {/* Bus Header */}\r\n                            <div className=\"flex items-center justify-between mb-2\">\r\n                              <div className=\"flex items-center space-x-2\">\r\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                                <span className=\"font-medium text-sm text-gray-800\">\r\n                                  {bus.busNumber}\r\n                                </span>\r\n                                <span className=\"text-xs text-blue-600 opacity-75\">\r\n                                  👆\r\n                                </span>\r\n                              </div>\r\n                              <div className=\"text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded\">\r\n                                {bus.eta ? `${bus.eta} min` : 'ETA: --'}\r\n                              </div>\r\n                            </div>\r\n\r\n                            {/* Bus Details */}\r\n                            <div className=\"space-y-1\">\r\n                              <div className=\"text-xs text-gray-600\">\r\n                                📍 Route: {bus.routeName}\r\n                              </div>\r\n                              <div className=\"text-xs text-gray-600\">\r\n                                👨‍💼 Driver: {bus.driverName}\r\n                              </div>\r\n                              {location && (\r\n                                <div className=\"flex items-center justify-between text-xs\">\r\n                                  <span className=\"text-green-600\">\r\n                                    🕐{' '}\r\n                                    {new Date(\r\n                                      location.timestamp\r\n                                    ).toLocaleTimeString([], {\r\n                                      hour: '2-digit',\r\n                                      minute: '2-digit',\r\n                                    })}\r\n                                  </span>\r\n                                  <span className=\"text-blue-600\">\r\n                                    {location.speed\r\n                                      ? `${location.speed} km/h`\r\n                                      : 'Speed: --'}\r\n                                  </span>\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          </motion.div>\r\n                        );\r\n                      })\r\n                    )}\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </div>\r\n          </div>\r\n        </GlassyCard>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedStudentMap;\r\n"],"names":["BusService","__publicField","lat1","lon1","lat2","lon2","timeDiffMs","dLat","dLon","a","distance","timeDiffHours","speed","degrees","location","busId","latitude","longitude","timestamp","previousLocation","timeDiff","_b","_a","routeName","bus","apiData","response","apiService","error","buses","busesByRoute","fiveMinutesAgo","eta","radiusKm","busLat","busLng","R","c","busService","EnhancedStudentMap","className","mapContainer","useRef","map","markers","isMapInitialized","addedRoutes","isConnected","setIsConnected","useState","connectionError","setConnectionError","connectionStatus","setConnectionStatus","setBuses","routes","setRoutes","selectedRoute","setSelectedRoute","isLoading","setIsLoading","lastBusLocations","setLastBusLocations","isNavbarCollapsed","setIsNavbarCollapsed","isRouteFilterOpen","setIsRouteFilterOpen","isActiveBusesOpen","setIsActiveBusesOpen","loadRoutes","useCallback","route","removeRoutesFromMap","routeId","addRoutesToMap","index","updateBusMarker","el","marker","maplibregl","popup","removeBusMarker","centerMapOnBuses","coordinates","bounds","coord","handleBusLocationUpdate","prev","handleDriverConnected","data","handleDriverDisconnected","handleBusArriving","useEffect","reconnectTimeout","statusInterval","reconnectAttempts","connectWebSocket","websocketService","authService","resolve","apiBus","updatedBuses","retryDelay","filteredBuses","useMemo","busesWithLiveLocations","busRoute","availableRoutes","jsxDEV","this","motion","GlassyCard","AnimatePresence"],"mappings":"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"}