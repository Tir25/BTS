{"version":3,"file":"BusMarker-CrDKL-TA.js","sources":["../../../src/components/map/BusMarker.tsx"],"sourcesContent":["import React, { memo, useMemo, useCallback } from 'react';\r\nimport maplibregl from 'maplibre-gl';\r\nimport { BusLocation } from '../../types';\r\n\r\ninterface BusMarkerProps {\r\n  map: maplibregl.Map;\r\n  location: BusLocation;\r\n  busInfo: {\r\n    busNumber: string;\r\n    driverName: string;\r\n    routeName: string;\r\n  };\r\n  isConnected: boolean;\r\n  onMarkerClick?: (busId: string) => void;\r\n  isClustered?: boolean;\r\n  clusterCount?: number;\r\n}\r\n\r\nconst BusMarker: React.FC<BusMarkerProps> = memo(({\r\n  map,\r\n  location,\r\n  busInfo,\r\n  isConnected,\r\n  onMarkerClick,\r\n  isClustered = false,\r\n  clusterCount = 1,\r\n}) => {\r\n  const { busId, latitude, longitude, speed, eta } = location;\r\n  const { busNumber, driverName, routeName } = busInfo;\r\n\r\n  // Memoize marker element to prevent recreation\r\n  const markerElement = useMemo(() => {\r\n    const el = document.createElement('div');\r\n    \r\n    if (isClustered && clusterCount > 1) {\r\n      // Cluster marker\r\n      el.className = 'bus-cluster-marker';\r\n      el.innerHTML = `\r\n        <div class=\"bus-cluster-pin\">\r\n          <div class=\"bus-cluster-icon\">ðŸšŒ</div>\r\n          <div class=\"bus-cluster-count\">${clusterCount}</div>\r\n          <div class=\"bus-cluster-pulse\"></div>\r\n        </div>\r\n      `;\r\n    } else {\r\n      // Individual bus marker\r\n      el.className = 'bus-marker';\r\n      el.innerHTML = `\r\n        <div class=\"bus-marker-pin\">\r\n          <div class=\"bus-marker-icon\">ðŸšŒ</div>\r\n          <div class=\"bus-marker-pulse\"></div>\r\n        </div>\r\n        <div class=\"bus-marker-content\">\r\n          <div class=\"bus-number\">${busNumber}</div>\r\n          <div class=\"bus-speed\">${speed ? `${speed} km/h` : 'N/A'}</div>\r\n          <div class=\"bus-eta\">${eta ? `ETA: ${eta.estimated_arrival_minutes} min` : 'ETA: N/A'}</div>\r\n        </div>\r\n      `;\r\n    }\r\n    \r\n    return el;\r\n  }, [busNumber, speed, eta, isClustered, clusterCount]);\r\n\r\n  // Memoize popup content\r\n  const popupContent = useMemo(() => {\r\n    if (isClustered && clusterCount > 1) {\r\n      return `\r\n        <div class=\"bus-cluster-popup\">\r\n          <div class=\"bus-cluster-popup-header\">\r\n            <h3>ðŸšŒ Bus Cluster</h3>\r\n            <div class=\"bus-cluster-count\">${clusterCount} buses</div>\r\n          </div>\r\n          <div class=\"bus-cluster-popup-content\">\r\n            <p>Click to expand and view individual buses</p>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n    \r\n    return `\r\n      <div class=\"bus-popup\">\r\n        <div class=\"bus-popup-header\">\r\n          <h3>ðŸšŒ Bus ${busNumber}</h3>\r\n          <div class=\"bus-status ${isConnected ? 'online' : 'offline'}\">\r\n            ${isConnected ? 'ðŸŸ¢ Online' : 'ðŸ”´ Offline'}\r\n          </div>\r\n        </div>\r\n        <div class=\"bus-popup-content\">\r\n          <div class=\"bus-info\">\r\n            <p><strong>Driver:</strong> ${driverName || 'N/A'}</p>\r\n            <p><strong>Route:</strong> ${routeName || 'N/A'}</p>\r\n            <p><strong>Speed:</strong> ${speed ? `${speed} km/h` : 'N/A'}</p>\r\n            <p><strong>Last Update:</strong> ${new Date(location.timestamp).toLocaleTimeString()}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }, [busNumber, driverName, routeName, speed, location.timestamp, isConnected, isClustered, clusterCount]);\r\n\r\n  // Memoized click handler\r\n  const handleMarkerClick = useCallback(() => {\r\n    if (onMarkerClick) {\r\n      onMarkerClick(busId);\r\n    }\r\n  }, [onMarkerClick, busId]);\r\n\r\n  // Create marker with memoized callbacks\r\n  const marker = useMemo(() => {\r\n    const markerInstance = new maplibregl.Marker({\r\n      element: markerElement,\r\n      anchor: 'center',\r\n    })\r\n      .setLngLat([longitude, latitude])\r\n      .addTo(map);\r\n\r\n    const popup = new maplibregl.Popup({\r\n      offset: 25,\r\n      className: isClustered ? 'bus-cluster-popup-container' : 'bus-popup-container',\r\n      closeButton: true,\r\n      closeOnClick: false,\r\n    }).setHTML(popupContent);\r\n\r\n    markerInstance.setPopup(popup);\r\n\r\n    // Add click handler if provided\r\n    if (onMarkerClick) {\r\n      markerInstance.getElement().addEventListener('click', handleMarkerClick);\r\n    }\r\n\r\n    return markerInstance;\r\n  }, [map, longitude, latitude, markerElement, popupContent, busId, onMarkerClick, isClustered, handleMarkerClick]);\r\n\r\n  // Update marker position when location changes\r\n  React.useEffect(() => {\r\n    marker.setLngLat([longitude, latitude]);\r\n    \r\n    // Update popup content\r\n    const popup = marker.getPopup();\r\n    popup.setHTML(popupContent);\r\n  }, [longitude, latitude, popupContent, marker]);\r\n\r\n  // Cleanup on unmount\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (marker) {\r\n        marker.remove();\r\n      }\r\n    };\r\n  }, [marker]);\r\n\r\n  return null; // This component doesn't render anything visible\r\n});\r\n\r\nBusMarker.displayName = 'BusMarker';\r\n\r\nexport default BusMarker;\r\n"],"names":["BusMarker","memo","map","location","busInfo","isConnected","onMarkerClick","isClustered","clusterCount","busId","latitude","longitude","speed","eta","busNumber","driverName","routeName","markerElement","useMemo","el","popupContent","handleMarkerClick","useCallback","marker","markerInstance","maplibregl","popup","React"],"mappings":"+FAkBA,MAAMA,EAAsCC,EAAAA,KAAK,CAAC,CAChD,IAAAC,EACA,SAAAC,EACA,QAAAC,EACA,YAAAC,EACA,cAAAC,EACA,YAAAC,EAAc,GACd,aAAAC,EAAe,CACjB,IAAM,CACJ,KAAM,CAAE,MAAAC,EAAO,SAAAC,EAAU,UAAAC,EAAW,MAAAC,EAAO,IAAAC,GAAQV,EAC7C,CAAE,UAAAW,EAAW,WAAAC,EAAY,UAAAC,CAAA,EAAcZ,EAGvCa,EAAgBC,EAAAA,QAAQ,IAAM,CAClC,MAAMC,EAAK,SAAS,cAAc,KAAK,EAEvC,OAAIZ,GAAeC,EAAe,GAEhCW,EAAG,UAAY,qBACfA,EAAG,UAAY;AAAA;AAAA;AAAA,2CAGsBX,CAAY;AAAA;AAAA;AAAA,UAMjDW,EAAG,UAAY,aACfA,EAAG,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAMeL,CAAS;AAAA,mCACVF,EAAQ,GAAGA,CAAK,QAAU,KAAK;AAAA,iCACjCC,EAAM,QAAQA,EAAI,yBAAyB,OAAS,UAAU;AAAA;AAAA,SAKpFM,CACT,EAAG,CAACL,EAAWF,EAAOC,EAAKN,EAAaC,CAAY,CAAC,EAG/CY,EAAeF,EAAAA,QAAQ,IACvBX,GAAeC,EAAe,EACzB;AAAA;AAAA;AAAA;AAAA,6CAIgCA,CAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAS9C;AAAA;AAAA;AAAA,uBAGYM,CAAS;AAAA,mCACGT,EAAc,SAAW,SAAS;AAAA,cACvDA,EAAc,YAAc,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0CAKZU,GAAc,KAAK;AAAA,yCACpBC,GAAa,KAAK;AAAA,yCAClBJ,EAAQ,GAAGA,CAAK,QAAU,KAAK;AAAA,+CACzB,IAAI,KAAKT,EAAS,SAAS,EAAE,oBAAoB;AAAA;AAAA;AAAA;AAAA,MAK3F,CAACW,EAAWC,EAAYC,EAAWJ,EAAOT,EAAS,UAAWE,EAAaE,EAAaC,CAAY,CAAC,EAGlGa,EAAoBC,EAAAA,YAAY,IAAM,CACtChB,GACFA,EAAcG,CAAK,CAEvB,EAAG,CAACH,EAAeG,CAAK,CAAC,EAGnBc,EAASL,EAAAA,QAAQ,IAAM,CAC3B,MAAMM,EAAiB,IAAIC,EAAW,OAAO,CAC3C,QAASR,EACT,OAAQ,QAAA,CACT,EACE,UAAU,CAACN,EAAWD,CAAQ,CAAC,EAC/B,MAAMR,CAAG,EAENwB,EAAQ,IAAID,EAAW,MAAM,CACjC,OAAQ,GACR,UAAWlB,EAAc,8BAAgC,sBACzD,YAAa,GACb,aAAc,EAAA,CACf,EAAE,QAAQa,CAAY,EAEvB,OAAAI,EAAe,SAASE,CAAK,EAGzBpB,GACFkB,EAAe,WAAA,EAAa,iBAAiB,QAASH,CAAiB,EAGlEG,CACT,EAAG,CAACtB,EAAKS,EAAWD,EAAUO,EAAeG,EAAcX,EAAOH,EAAeC,EAAac,CAAiB,CAAC,EAGhH,OAAAM,EAAM,UAAU,IAAM,CACpBJ,EAAO,UAAU,CAACZ,EAAWD,CAAQ,CAAC,EAGxBa,EAAO,SAAA,EACf,QAAQH,CAAY,CAC5B,EAAG,CAACT,EAAWD,EAAUU,EAAcG,CAAM,CAAC,EAG9CI,EAAM,UAAU,IACP,IAAM,CACPJ,GACFA,EAAO,OAAA,CAEX,EACC,CAACA,CAAM,CAAC,EAEJ,IACT,CAAC,EAEDvB,EAAU,YAAc"}